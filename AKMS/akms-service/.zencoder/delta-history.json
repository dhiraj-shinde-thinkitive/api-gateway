{"snapshots":{"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/docker-compose.yml":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/docker-compose.yml","baseContent":"version: \"3.3\"\nservices:\n\n    postgres:\n      container_name: zcloud-db\n      image: postgres:latest\n      environment:\n        POSTGRES_USER: zcloud-dev\n        POSTGRES_PASSWORD: Zcloud@2024#\n        POSTGRES_DB: zcloud-emr\n        PGDATA: /data/postgres\n      volumes:\n        - postgres-db-zcloud:/data/postgres\n        - ./init-postgres:/docker-entrypoint-initdb.d\n      ports:\n        - \"5432:5432\"\n      restart: on-failure\n\n    ","baseTimestamp":1758548643038,"deltas":[{"timestamp":1758548648119,"changes":[{"type":"DELETE","lineNumber":17,"oldContent":""},{"type":"DELETE","lineNumber":18,"oldContent":"    "}]},{"timestamp":1758548655560,"changes":[{"type":"MODIFY","lineNumber":4,"content":"      container_name: sprouts-db","oldContent":"      container_name: zcloud-db"}]},{"timestamp":1758548660269,"changes":[{"type":"MODIFY","lineNumber":4,"content":"      container_name: sproutsai-db","oldContent":"      container_name: sprouts-db"}]},{"timestamp":1758548665073,"changes":[{"type":"MODIFY","lineNumber":4,"content":"      container_name: sprouts-db","oldContent":"      container_name: sproutsai-db"}]},{"timestamp":1758548671681,"changes":[{"type":"MODIFY","lineNumber":7,"content":"        POSTGRES_USER: sprouts-dev","oldContent":"        POSTGRES_USER: zcloud-dev"}]},{"timestamp":1758548682891,"changes":[{"type":"MODIFY","lineNumber":8,"content":"        POSTGRES_PASSWORD: Sprouts@2025","oldContent":"        POSTGRES_PASSWORD: Zcloud@2024#"}]},{"timestamp":1758548691469,"changes":[{"type":"MODIFY","lineNumber":9,"content":"        POSTGRES_DB: sprouts-ai","oldContent":"        POSTGRES_DB: zcloud-emr"}]},{"timestamp":1758548699331,"changes":[{"type":"MODIFY","lineNumber":12,"content":"        - postgres-db-sprouts:/data/postgres","oldContent":"        - postgres-db-zcloud:/data/postgres"}]},{"timestamp":1758548875884,"changes":[{"type":"MODIFY","lineNumber":0,"content":"version: \"3.9\"","oldContent":"version: \"3.3\""},{"type":"INSERT","lineNumber":2,"content":"  postgres:"},{"type":"INSERT","lineNumber":3,"content":"    image: postgres:16"},{"type":"INSERT","lineNumber":4,"content":"    container_name: sprouts-postgres"},{"type":"INSERT","lineNumber":5,"content":"    restart: always"},{"type":"INSERT","lineNumber":6,"content":"    environment:"},{"type":"INSERT","lineNumber":7,"content":"      POSTGRES_USER: sprouts-dev"},{"type":"INSERT","lineNumber":8,"content":"      POSTGRES_PASSWORD: Sprouts@2025"},{"type":"INSERT","lineNumber":9,"content":"      POSTGRES_DB: sprouts-ai"},{"type":"INSERT","lineNumber":10,"content":"    ports:"},{"type":"INSERT","lineNumber":11,"content":"      - \"5432:5432\""},{"type":"INSERT","lineNumber":12,"content":"    volumes:"},{"type":"INSERT","lineNumber":13,"content":"      - postgres_data:/var/lib/postgresql/data"},{"type":"INSERT","lineNumber":14,"content":"      - ./init-scripts:/docker-entrypoint-initdb.d  # optional: place flyway/init scripts here"},{"type":"DELETE","lineNumber":3,"oldContent":"    postgres:"},{"type":"DELETE","lineNumber":4,"oldContent":"      container_name: sprouts-db"},{"type":"DELETE","lineNumber":5,"oldContent":"      image: postgres:latest"},{"type":"DELETE","lineNumber":6,"oldContent":"      environment:"},{"type":"DELETE","lineNumber":7,"oldContent":"        POSTGRES_USER: sprouts-dev"},{"type":"DELETE","lineNumber":8,"oldContent":"        POSTGRES_PASSWORD: Sprouts@2025"},{"type":"DELETE","lineNumber":9,"oldContent":"        POSTGRES_DB: sprouts-ai"},{"type":"DELETE","lineNumber":10,"oldContent":"        PGDATA: /data/postgres"},{"type":"DELETE","lineNumber":11,"oldContent":"      volumes:"},{"type":"DELETE","lineNumber":12,"oldContent":"        - postgres-db-sprouts:/data/postgres"},{"type":"DELETE","lineNumber":13,"oldContent":"        - ./init-postgres:/docker-entrypoint-initdb.d"},{"type":"DELETE","lineNumber":14,"oldContent":"      ports:"},{"type":"DELETE","lineNumber":15,"oldContent":"        - \"5432:5432\""},{"type":"MODIFY","lineNumber":16,"content":"volumes:","oldContent":"      restart: on-failure"},{"type":"INSERT","lineNumber":17,"content":"  postgres_data:"},{"type":"INSERT","lineNumber":18,"content":""}]},{"timestamp":1758549144256,"changes":[{"type":"INSERT","lineNumber":1,"content":""},{"type":"DELETE","lineNumber":3,"oldContent":""},{"type":"MODIFY","lineNumber":15,"content":"","oldContent":"      - ./init-scripts:/docker-entrypoint-initdb.d  # optional: place flyway/init scripts here"},{"type":"INSERT","lineNumber":16,"content":"  flyway:"},{"type":"INSERT","lineNumber":17,"content":"    image: flyway/flyway:10"},{"type":"INSERT","lineNumber":18,"content":"    container_name: sprouts-flyway"},{"type":"INSERT","lineNumber":19,"content":"    command: -url=jdbc:postgresql://postgres:5432/sprouts-ai -user=sprouts-dev -password=Sprouts@2025 -connectRetries=10 migrate"},{"type":"INSERT","lineNumber":20,"content":"    depends_on:"},{"type":"INSERT","lineNumber":21,"content":"      - postgres"},{"type":"INSERT","lineNumber":22,"content":"    volumes:"},{"type":"INSERT","lineNumber":23,"content":"      - ./src/main/resources/db/migration:/flyway/sql  # Mount your migration folder"},{"type":"INSERT","lineNumber":24,"content":""}]},{"timestamp":1758549174176,"changes":[{"type":"DELETE","lineNumber":16,"oldContent":"  flyway:"},{"type":"DELETE","lineNumber":18,"oldContent":"    image: flyway/flyway:10"},{"type":"DELETE","lineNumber":20,"oldContent":"    container_name: sprouts-flyway"},{"type":"DELETE","lineNumber":22,"oldContent":"    command: -url=jdbc:postgresql://postgres:5432/sprouts-ai -user=sprouts-dev -password=Sprouts@2025 -connectRetries=10 migrate"},{"type":"DELETE","lineNumber":23,"oldContent":""},{"type":"DELETE","lineNumber":24,"oldContent":"    depends_on:"},{"type":"DELETE","lineNumber":25,"oldContent":"      - ./src/main/resources/db/migration:/flyway/sql  # Mount your migration folder"},{"type":"DELETE","lineNumber":26,"oldContent":"      - postgres"},{"type":"DELETE","lineNumber":27,"oldContent":"    volumes:"}]},{"timestamp":1758550104110,"changes":[{"type":"MODIFY","lineNumber":12,"content":"      - \"5433:5432\"","oldContent":"      - \"5432:5432\""}]},{"timestamp":1758550192941,"changes":[{"type":"MODIFY","lineNumber":12,"content":"      - \"5434:5432\"","oldContent":"      - \"5433:5432\""}]}]},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/resources/db.migration/V1__init_table.sql":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/resources/db.migration/V1__init_table.sql","baseContent":"-- V1__init.sql\n\nCREATE TABLE customers (\n    id UUID PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(150) UNIQUE NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE api_keys (\n    id UUID PRIMARY KEY,\n    customer_id UUID NOT NULL REFERENCES customers(id),\n    api_key_hash VARCHAR(255) NOT NULL,\n    name VARCHAR(100),\n    permissions TEXT, -- can hold JSON array as string\n    rate_limit INT DEFAULT 1000,\n    expiry_date TIMESTAMP,\n    status VARCHAR(20) DEFAULT 'active',\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n","baseTimestamp":1758548945548,"deltas":[{"timestamp":1758548965103,"changes":[{"type":"MODIFY","lineNumber":2,"content":"CREATE TABLE if not exits customers (","oldContent":"CREATE TABLE customers ("}]},{"timestamp":1758548968071,"changes":[{"type":"MODIFY","lineNumber":2,"content":"CREATE TABLE if not exists customers (","oldContent":"CREATE TABLE if not exits customers ("}]},{"timestamp":1758548975701,"changes":[{"type":"MODIFY","lineNumber":10,"content":"CREATE TABLE if not exists api_keys (","oldContent":"CREATE TABLE api_keys ("}]}]},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/resources/application.properties":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/resources/application.properties","baseContent":"spring.application.name=AKMS\nspring.datasource.url=${DB_URL:jdbc:mysql://localhost:3307/oxos-platform-test}\nspring.datasource.username=${DB_USERNAME:ganesh.varhade}\n#spring.datasource.username=${DB_USERNAME:root}\n#spring.datasource.password=${DB_PASSWORD:root}","baseTimestamp":1758549226566,"deltas":[{"timestamp":1758549257980,"changes":[{"type":"MODIFY","lineNumber":1,"content":"spring.datasource.url=${DB_URL:jdbc:mysql://localhost:3307/sprouts-ai}","oldContent":"spring.datasource.url=${DB_URL:jdbc:mysql://localhost:3307/oxos-platform-test}"}]},{"timestamp":1758549261147,"changes":[{"type":"MODIFY","lineNumber":1,"content":"spring.datasource.url=${DB_URL:jdbc:mysql://localhost:5432/sprouts-ai}","oldContent":"spring.datasource.url=${DB_URL:jdbc:mysql://localhost:3307/sprouts-ai}"}]},{"timestamp":1758549275234,"changes":[{"type":"MODIFY","lineNumber":2,"content":"spring.datasource.username=${DB_USERNAME:sprouts-dev}","oldContent":"spring.datasource.username=${DB_USERNAME:ganesh.varhade}"}]},{"timestamp":1758549283149,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"#spring.datasource.username=${DB_USERNAME:root}"}]},{"timestamp":1758549285914,"changes":[{"type":"MODIFY","lineNumber":3,"content":"spring.datasource.password=${DB_PASSWORD:root}","oldContent":"#spring.datasource.password=${DB_PASSWORD:root}"}]},{"timestamp":1758549298754,"changes":[{"type":"MODIFY","lineNumber":3,"content":"spring.datasource.password=${DB_PASSWORD:Sprouts@2025}","oldContent":"spring.datasource.password=${DB_PASSWORD:root}"}]},{"timestamp":1758549311867,"changes":[{"type":"MODIFY","lineNumber":2,"content":"spring.datasource.username=${DB_USERNAME:sprouts-dev}sprouts-dev","oldContent":"spring.datasource.username=${DB_USERNAME:sprouts-dev}"}]},{"timestamp":1758549314621,"changes":[{"type":"MODIFY","lineNumber":2,"content":"spring.datasource.username=sprouts-dev","oldContent":"spring.datasource.username=${DB_USERNAME:sprouts-dev}sprouts-dev"}]},{"timestamp":1758549320881,"changes":[{"type":"MODIFY","lineNumber":3,"content":"spring.datasource.password=Sprouts@2025","oldContent":"spring.datasource.password=${DB_PASSWORD:Sprouts@2025}"}]},{"timestamp":1758549328150,"changes":[{"type":"MODIFY","lineNumber":1,"content":"spring.datasource.url=jdbc:mysql://localhost:5432/sprouts-ai","oldContent":"spring.datasource.url=${DB_URL:jdbc:mysql://localhost:5432/sprouts-ai}"}]},{"timestamp":1758550257931,"changes":[{"type":"MODIFY","lineNumber":1,"content":"    spring.datasource.url=jdbc:mysql://localhost:5432/sprouts-ai","oldContent":"spring.datasource.url=jdbc:mysql://localhost:5432/sprouts-ai"}]},{"timestamp":1758550837472,"changes":[{"type":"MODIFY","lineNumber":1,"content":"spring.datasource.url=jdbc:mysql://localhost:5432/sprouts-ai","oldContent":"    spring.datasource.url=jdbc:mysql://localhost:5432/sprouts-ai"}]},{"timestamp":1758550845929,"changes":[{"type":"MODIFY","lineNumber":1,"content":"spring.datasource.url=jdbc:postgresql://localhost:5432/sprouts-ai","oldContent":"spring.datasource.url=jdbc:mysql://localhost:5432/sprouts-ai"}]},{"timestamp":1758550849280,"changes":[{"type":"MODIFY","lineNumber":1,"content":"spring.datasource.url=jdbc:postgresql://localhost:5434/sprouts-ai","oldContent":"spring.datasource.url=jdbc:postgresql://localhost:5432/sprouts-ai"}]}]},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/core/entity/CustomerEntity.java":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/core/entity/CustomerEntity.java","baseContent":"package com.sprout.AKMS.core.entity;\n\npublic class CustomerEntity {\n    @Id\n    private UUID id;\n\n    @Column(nullable = false, length = 100)\n    private String name;\n\n    @Column(nullable = false, unique = true, length = 150)\n    private String email;\n\n    @Column(name = \"created_at\")\n    private LocalDateTime createdAt;\n\n    @Column(name = \"updated_at\")\n    private LocalDateTime updatedAt;\n\n    @PrePersist\n    public void prePersist() {\n        this.id = UUID.randomUUID();\n        this.createdAt = LocalDateTime.now();\n        this.updatedAt = LocalDateTime.now();\n    }\n}\n","baseTimestamp":1758549449647,"deltas":[{"timestamp":1758549459930,"changes":[{"type":"INSERT","lineNumber":2,"content":""},{"type":"INSERT","lineNumber":3,"content":"import jakarta.persistence.*;"},{"type":"INSERT","lineNumber":4,"content":"import lombok.*;"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"INSERT","lineNumber":6,"content":"import java.time.LocalDateTime;"},{"type":"INSERT","lineNumber":7,"content":"import java.util.UUID;"},{"type":"INSERT","lineNumber":8,"content":""},{"type":"INSERT","lineNumber":9,"content":"@Entity"},{"type":"INSERT","lineNumber":10,"content":"@Table(name = \"customers\")"},{"type":"INSERT","lineNumber":11,"content":"@Getter"},{"type":"INSERT","lineNumber":12,"content":"@Setter"},{"type":"INSERT","lineNumber":13,"content":"@Builder"},{"type":"INSERT","lineNumber":14,"content":"@NoArgsConstructor"},{"type":"INSERT","lineNumber":15,"content":"@AllArgsConstructor"},{"type":"INSERT","lineNumber":16,"content":""}]}]},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/core/entity/ApiKeyEntity.java":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/core/entity/ApiKeyEntity.java","baseContent":"package com.akms.entity;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\nimport java.time.LocalDateTime;\nimport java.util.UUID;\n\n@Entity\n@Table(name = \"api_keys\")\n@Getter\n@Setter\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ApiKey {\n\n    @Id\n    private UUID id;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"customer_id\", nullable = false)\n    private Customer customer;\n\n    @Column(name = \"api_key_hash\", nullable = false, length = 255)\n    private String apiKeyHash;\n\n    @Column(name = \"name\", length = 100)\n    private String name;\n\n    @Column(columnDefinition = \"TEXT\")\n    private String permissions; // JSON string\n\n    @Column(name = \"rate_limit\")\n    private Integer rateLimit;\n\n    @Column(name = \"expiry_date\")\n    private LocalDateTime expiryDate;\n\n    @Column(name = \"status\", length = 20)\n    private String status; // active, revoked, expired\n\n    @Column(name = \"created_at\")\n    private LocalDateTime createdAt;\n\n    @Column(name = \"updated_at\")\n    private LocalDateTime updatedAt;\n\n    @PrePersist\n    public void prePersist() {\n        this.id = UUID.randomUUID();\n        this.createdAt = LocalDateTime.now();\n        this.updatedAt = LocalDateTime.now();\n    }\n\n    @PreUpdate\n    public void preUpdate() {\n        this.updatedAt = LocalDateTime.now();\n    }\n}\n","baseTimestamp":1758549469953,"deltas":[{"timestamp":1758549479596,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package com.sprouts.akms.entity;","oldContent":"package com.akms.entity;"}]},{"timestamp":1758549490633,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package com.sprout.AKMS.core.entity;","oldContent":"package com.sprouts.akms.entity;"}]},{"timestamp":1758549495727,"changes":[{"type":"MODIFY","lineNumber":22,"content":"    private CustomerEntity customer;","oldContent":"    private Customer customer;"}]},{"timestamp":1758549533733,"changes":[{"type":"MODIFY","lineNumber":15,"content":"public class ApiKeyEntity {","oldContent":"public class ApiKey {"}]},{"timestamp":1758549539917,"changes":[{"type":"DELETE","lineNumber":54,"oldContent":""},{"type":"DELETE","lineNumber":55,"oldContent":"    @PreUpdate"},{"type":"DELETE","lineNumber":56,"oldContent":"    public void preUpdate() {"},{"type":"DELETE","lineNumber":57,"oldContent":"        this.updatedAt = LocalDateTime.now();"},{"type":"DELETE","lineNumber":58,"oldContent":"    }"}]}]},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/repository/CustomerRepository.java":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/repository/CustomerRepository.java","baseContent":"package com.akms.repository;\n\nimport com.akms.entity.Customer;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.Optional;\nimport java.util.UUID;\n\npublic interface CustomerRepository extends JpaRepository<Customer, UUID> {\n    Optional<Customer> findByEmail(String email);\n}\n","baseTimestamp":1758549566701,"deltas":[{"timestamp":1758549573006,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package com.sprout.AKMS.repository;","oldContent":"package com.akms.repository;"}]},{"timestamp":1758549578846,"changes":[{"type":"MODIFY","lineNumber":9,"content":"    Optional<CustomerEn> findByEmail(String email);","oldContent":"    Optional<Customer> findByEmail(String email);"}]},{"timestamp":1758549581002,"changes":[{"type":"INSERT","lineNumber":3,"content":"import com.sprout.AKMS.core.entity.CustomerEntity;"},{"type":"MODIFY","lineNumber":10,"content":"    Optional<CustomerEntity> findByEmail(String email);","oldContent":"    Optional<CustomerEn> findByEmail(String email);"}]},{"timestamp":1758549585403,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import com.akms.entity.Customer;"},{"type":"MODIFY","lineNumber":10,"content":"}","oldContent":"    Optional<CustomerEn> findByEmail(String email);"}]},{"timestamp":1758549591168,"changes":[{"type":"DELETE","lineNumber":8,"oldContent":"public interface CustomerRepository extends JpaRepository<Customer, UUID> {"},{"type":"DELETE","lineNumber":9,"oldContent":"}"},{"type":"INSERT","lineNumber":8,"content":"public interface CustomerRepository extends JpaRepository<CustomerEntity, UUID> {"},{"type":"INSERT","lineNumber":10,"content":"}"}]}]},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/repository/ApiKeyRepository.java":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/repository/ApiKeyRepository.java","baseContent":"package com.akms.repository;\n\nimport com.akms.entity.ApiKey;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.Optional;\nimport java.util.UUID;\n\npublic interface ApiKeyRepository extends JpaRepository<ApiKey, UUID> {\n    Optional<ApiKey> findByApiKeyHash(String apiKeyHash);\n}\n","baseTimestamp":1758549615687,"deltas":[{"timestamp":1758549619741,"changes":[{"type":"INSERT","lineNumber":3,"content":"import com.sprout.AKMS.core.entity.ApiKeyEntity;"},{"type":"MODIFY","lineNumber":9,"content":"public interface ApiKeyRepository extends JpaRepository<ApiKeyEntity, UUID> {","oldContent":"public interface ApiKeyRepository extends JpaRepository<ApiKey, UUID> {"}]},{"timestamp":1758549622922,"changes":[{"type":"DELETE","lineNumber":9,"oldContent":"public interface ApiKeyRepository extends JpaRepository<ApiKey, UUID> {"},{"type":"INSERT","lineNumber":10,"content":"    Optional<ApiKeyEntity> findByApiKeyHash(String apiKeyHash);"}]},{"timestamp":1758549625420,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import com.akms.entity.ApiKey;"},{"type":"MODIFY","lineNumber":9,"content":"    Optional<ApiKeyEntity> findByApiKeyHash(String apiKeyHash);","oldContent":"    Optional<ApiKeyEntity> findByApiKeyHash(String apiKeyHash);"}]},{"timestamp":1758549632629,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package com.sprout.AKMS.repository;","oldContent":"package com.akms.repository;"},{"type":"INSERT","lineNumber":2,"content":""},{"type":"DELETE","lineNumber":8,"oldContent":"    Optional<ApiKeyEntity> findByApiKeyHash(String apiKeyHash);"},{"type":"INSERT","lineNumber":10,"content":"    Optional<ApiKeyEntity> findByApiKeyHash(String apiKeyHash);"}]},{"timestamp":1758552826892,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"INSERT","lineNumber":3,"content":"import org.springframework.data.domain.Page;"},{"type":"INSERT","lineNumber":4,"content":"import org.springframework.data.domain.Pageable;"},{"type":"INSERT","lineNumber":6,"content":"import org.springframework.data.jpa.repository.Query;"},{"type":"INSERT","lineNumber":7,"content":"import org.springframework.data.repository.query.Param;"},{"type":"INSERT","lineNumber":9,"content":"import java.time.LocalDateTime;"},{"type":"INSERT","lineNumber":10,"content":"import java.util.List;"},{"type":"DELETE","lineNumber":11,"oldContent":"}"},{"type":"INSERT","lineNumber":17,"content":"    List<ApiKeyEntity> findByCustomerId(UUID customerId);"},{"type":"INSERT","lineNumber":18,"content":"    Page<ApiKeyEntity> findByCustomerId(UUID customerId, Pageable pageable);"},{"type":"INSERT","lineNumber":19,"content":""},{"type":"INSERT","lineNumber":20,"content":"    List<ApiKeyEntity> findByStatus(String status);"},{"type":"INSERT","lineNumber":21,"content":"    Page<ApiKeyEntity> findByStatus(String status, Pageable pageable);"},{"type":"INSERT","lineNumber":22,"content":""},{"type":"INSERT","lineNumber":23,"content":"    List<ApiKeyEntity> findByCustomerIdAndStatus(UUID customerId, String status);"},{"type":"INSERT","lineNumber":24,"content":""},{"type":"INSERT","lineNumber":25,"content":"    @Query(\"SELECT a FROM ApiKeyEntity a WHERE a.expiryDate < :currentTime AND a.status != 'expired'\")"},{"type":"INSERT","lineNumber":26,"content":"    List<ApiKeyEntity> findExpiredKeys(@Param(\"currentTime\") LocalDateTime currentTime);"},{"type":"INSERT","lineNumber":27,"content":""},{"type":"INSERT","lineNumber":28,"content":"    @Query(\"SELECT a FROM ApiKeyEntity a WHERE a.customer.id = :customerId AND a.status = 'active'\")"},{"type":"INSERT","lineNumber":29,"content":"    List<ApiKeyEntity> findActiveKeysByCustomerId(@Param(\"customerId\") UUID customerId);"},{"type":"INSERT","lineNumber":30,"content":""},{"type":"INSERT","lineNumber":31,"content":"    @Query(\"SELECT COUNT(a) FROM ApiKeyEntity a WHERE a.customer.id = :customerId AND a.status = 'active'\")"},{"type":"INSERT","lineNumber":32,"content":"    long countActiveKeysByCustomerId(@Param(\"customerId\") UUID customerId);"},{"type":"INSERT","lineNumber":33,"content":"}"}]}]},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/controller/CustomerController.java":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/controller/CustomerController.java","baseContent":"package com.akms.dto;\n\nimport lombok.Data;\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@Data\npublic class GenerateKeyRequest {\n    private String customerId;\n    private String name;\n    private List<String> permissions;\n    private Integer rateLimit;\n    private LocalDateTime expiryDate;\n}\n","baseTimestamp":1758549655083,"deltas":[{"timestamp":1758549659961,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package com.sprout.AKMS.controller;","oldContent":"package com.akms.dto;"},{"type":"DELETE","lineNumber":2,"oldContent":"import lombok.Data;"},{"type":"DELETE","lineNumber":3,"oldContent":"import java.time.LocalDateTime;"},{"type":"DELETE","lineNumber":4,"oldContent":"import java.util.List;"},{"type":"DELETE","lineNumber":5,"oldContent":""},{"type":"DELETE","lineNumber":6,"oldContent":"@Data"},{"type":"DELETE","lineNumber":7,"oldContent":"public class GenerateKeyRequest {"},{"type":"DELETE","lineNumber":8,"oldContent":"    private String customerId;"},{"type":"DELETE","lineNumber":9,"oldContent":"    private String name;"},{"type":"DELETE","lineNumber":10,"oldContent":"    private List<String> permissions;"},{"type":"DELETE","lineNumber":11,"oldContent":"    private Integer rateLimit;"},{"type":"DELETE","lineNumber":12,"oldContent":"    private LocalDateTime expiryDate;"},{"type":"INSERT","lineNumber":2,"content":"public class CustomerController {"}]},{"timestamp":1758552277097,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.sprout.AKMS.core.dto.Customer;"},{"type":"INSERT","lineNumber":3,"content":"import com.sprout.AKMS.service.CustomerService;"},{"type":"INSERT","lineNumber":4,"content":"import io.swagger.v3.oas.annotations.Operation;"},{"type":"INSERT","lineNumber":5,"content":"import io.swagger.v3.oas.annotations.Parameter;"},{"type":"INSERT","lineNumber":6,"content":"import io.swagger.v3.oas.annotations.responses.ApiResponse;"},{"type":"INSERT","lineNumber":7,"content":"import io.swagger.v3.oas.annotations.responses.ApiResponses;"},{"type":"INSERT","lineNumber":8,"content":"import io.swagger.v3.oas.annotations.tags.Tag;"},{"type":"INSERT","lineNumber":9,"content":"import jakarta.validation.Valid;"},{"type":"INSERT","lineNumber":10,"content":"import lombok.RequiredArgsConstructor;"},{"type":"INSERT","lineNumber":11,"content":"import lombok.extern.slf4j.Slf4j;"},{"type":"INSERT","lineNumber":12,"content":"import org.springframework.data.domain.Page;"},{"type":"INSERT","lineNumber":13,"content":"import org.springframework.data.domain.PageRequest;"},{"type":"INSERT","lineNumber":14,"content":"import org.springframework.data.domain.Pageable;"},{"type":"INSERT","lineNumber":15,"content":"import org.springframework.data.domain.Sort;"},{"type":"INSERT","lineNumber":16,"content":"import org.springframework.http.HttpStatus;"},{"type":"INSERT","lineNumber":17,"content":"import org.springframework.http.ResponseEntity;"},{"type":"INSERT","lineNumber":18,"content":"import org.springframework.web.bind.annotation.*;"},{"type":"INSERT","lineNumber":19,"content":""},{"type":"INSERT","lineNumber":20,"content":"import java.util.List;"},{"type":"INSERT","lineNumber":21,"content":"import java.util.UUID;"},{"type":"INSERT","lineNumber":22,"content":""},{"type":"INSERT","lineNumber":23,"content":"@RestController"},{"type":"INSERT","lineNumber":24,"content":"@RequestMapping(\"/api/customers\")"},{"type":"INSERT","lineNumber":25,"content":"@RequiredArgsConstructor"},{"type":"INSERT","lineNumber":26,"content":"@Slf4j"},{"type":"INSERT","lineNumber":27,"content":"@Tag(name = \"Customer Management\", description = \"APIs for managing customers\")"},{"type":"DELETE","lineNumber":3,"oldContent":"}"},{"type":"INSERT","lineNumber":30,"content":"    private final CustomerService customerService;"},{"type":"INSERT","lineNumber":31,"content":""},{"type":"INSERT","lineNumber":32,"content":"    @PostMapping"},{"type":"INSERT","lineNumber":33,"content":"    @Operation(summary = \"Create a new customer\", description = \"Creates a new customer with the provided details\")"},{"type":"INSERT","lineNumber":34,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":35,"content":"            @ApiResponse(responseCode = \"201\", description = \"Customer created successfully\"),"},{"type":"INSERT","lineNumber":36,"content":"            @ApiResponse(responseCode = \"400\", description = \"Invalid input data\"),"},{"type":"INSERT","lineNumber":37,"content":"            @ApiResponse(responseCode = \"409\", description = \"Customer with email already exists\")"},{"type":"INSERT","lineNumber":38,"content":"    })"},{"type":"INSERT","lineNumber":39,"content":"    public ResponseEntity<Customer> createCustomer(@Valid @RequestBody Customer customer) {"},{"type":"INSERT","lineNumber":40,"content":"        log.info(\"Request to create customer: {}\", customer.getEmail());"},{"type":"INSERT","lineNumber":41,"content":"        try {"},{"type":"INSERT","lineNumber":42,"content":"            Customer createdCustomer = customerService.createCustomer(customer);"},{"type":"INSERT","lineNumber":43,"content":"            return new ResponseEntity<>(createdCustomer, HttpStatus.CREATED);"},{"type":"INSERT","lineNumber":44,"content":"        } catch (RuntimeException e) {"},{"type":"INSERT","lineNumber":45,"content":"            log.error(\"Error creating customer: {}\", e.getMessage());"},{"type":"INSERT","lineNumber":46,"content":"            return ResponseEntity.status(HttpStatus.CONFLICT).build();"},{"type":"INSERT","lineNumber":47,"content":"        }"},{"type":"INSERT","lineNumber":48,"content":"    }"},{"type":"INSERT","lineNumber":49,"content":""},{"type":"INSERT","lineNumber":50,"content":"    @GetMapping(\"/{id}\")"},{"type":"INSERT","lineNumber":51,"content":"    @Operation(summary = \"Get customer by ID\", description = \"Retrieves a customer by their unique ID\")"},{"type":"INSERT","lineNumber":52,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":53,"content":"            @ApiResponse(responseCode = \"200\", description = \"Customer found\"),"},{"type":"INSERT","lineNumber":54,"content":"            @ApiResponse(responseCode = \"404\", description = \"Customer not found\")"},{"type":"INSERT","lineNumber":55,"content":"    })"},{"type":"INSERT","lineNumber":56,"content":"    public ResponseEntity<Customer> getCustomerById("},{"type":"INSERT","lineNumber":57,"content":"            @Parameter(description = \"Customer ID\") @PathVariable UUID id) {"},{"type":"INSERT","lineNumber":58,"content":"        log.info(\"Request to get customer by ID: {}\", id);"},{"type":"INSERT","lineNumber":59,"content":"        return customerService.getCustomerById(id)"},{"type":"INSERT","lineNumber":60,"content":"                .map(customer -> ResponseEntity.ok(customer))"},{"type":"INSERT","lineNumber":61,"content":"                .orElse(ResponseEntity.notFound().build());"},{"type":"INSERT","lineNumber":62,"content":"    }"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"INSERT","lineNumber":64,"content":"    @GetMapping(\"/email/{email}\")"},{"type":"INSERT","lineNumber":65,"content":"    @Operation(summary = \"Get customer by email\", description = \"Retrieves a customer by their email address\")"},{"type":"INSERT","lineNumber":66,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":67,"content":"            @ApiResponse(responseCode = \"200\", description = \"Customer found\"),"},{"type":"INSERT","lineNumber":68,"content":"            @ApiResponse(responseCode = \"404\", description = \"Customer not found\")"},{"type":"INSERT","lineNumber":69,"content":"    })"},{"type":"INSERT","lineNumber":70,"content":"    public ResponseEntity<Customer> getCustomerByEmail("},{"type":"INSERT","lineNumber":71,"content":"            @Parameter(description = \"Customer email\") @PathVariable String email) {"},{"type":"INSERT","lineNumber":72,"content":"        log.info(\"Request to get customer by email: {}\", email);"},{"type":"INSERT","lineNumber":73,"content":"        return customerService.getCustomerByEmail(email)"},{"type":"INSERT","lineNumber":74,"content":"                .map(customer -> ResponseEntity.ok(customer))"},{"type":"INSERT","lineNumber":75,"content":"                .orElse(ResponseEntity.notFound().build());"},{"type":"INSERT","lineNumber":76,"content":"    }"},{"type":"INSERT","lineNumber":77,"content":""},{"type":"INSERT","lineNumber":78,"content":"    @GetMapping"},{"type":"INSERT","lineNumber":79,"content":"    @Operation(summary = \"Get all customers\", description = \"Retrieves all customers with optional pagination\")"},{"type":"INSERT","lineNumber":80,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":81,"content":"            @ApiResponse(responseCode = \"200\", description = \"Customers retrieved successfully\")"},{"type":"INSERT","lineNumber":82,"content":"    })"},{"type":"INSERT","lineNumber":83,"content":"    public ResponseEntity<?> getAllCustomers("},{"type":"INSERT","lineNumber":84,"content":"            @Parameter(description = \"Page number (0-based)\") @RequestParam(defaultValue = \"0\") int page,"},{"type":"INSERT","lineNumber":85,"content":"            @Parameter(description = \"Page size\") @RequestParam(defaultValue = \"10\") int size,"},{"type":"INSERT","lineNumber":86,"content":"            @Parameter(description = \"Sort by field\") @RequestParam(defaultValue = \"createdAt\") String sortBy,"},{"type":"INSERT","lineNumber":87,"content":"            @Parameter(description = \"Sort direction\") @RequestParam(defaultValue = \"desc\") String sortDir,"},{"type":"INSERT","lineNumber":88,"content":"            @Parameter(description = \"Enable pagination\") @RequestParam(defaultValue = \"true\") boolean paginated) {"},{"type":"INSERT","lineNumber":89,"content":""},{"type":"INSERT","lineNumber":90,"content":"        log.info(\"Request to get all customers - page: {}, size: {}, sortBy: {}, sortDir: {}, paginated: {}\","},{"type":"INSERT","lineNumber":91,"content":"                page, size, sortBy, sortDir, paginated);"},{"type":"INSERT","lineNumber":92,"content":""},{"type":"INSERT","lineNumber":93,"content":"        if (!paginated) {"},{"type":"INSERT","lineNumber":94,"content":"            List<Customer> customers = customerService.getAllCustomers();"},{"type":"INSERT","lineNumber":95,"content":"            return ResponseEntity.ok(customers);"},{"type":"INSERT","lineNumber":96,"content":"        }"},{"type":"INSERT","lineNumber":97,"content":""},{"type":"INSERT","lineNumber":98,"content":"        Sort sort = sortDir.equalsIgnoreCase(\"desc\") ?"},{"type":"INSERT","lineNumber":99,"content":"                Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();"},{"type":"INSERT","lineNumber":100,"content":"        Pageable pageable = PageRequest.of(page, size, sort);"},{"type":"INSERT","lineNumber":101,"content":"        Page<Customer> customers = customerService.getAllCustomers(pageable);"},{"type":"INSERT","lineNumber":102,"content":""},{"type":"INSERT","lineNumber":103,"content":"        return ResponseEntity.ok(customers);"},{"type":"INSERT","lineNumber":104,"content":"    }"},{"type":"INSERT","lineNumber":105,"content":""},{"type":"INSERT","lineNumber":106,"content":"    @PutMapping(\"/{id}\")"},{"type":"INSERT","lineNumber":107,"content":"    @Operation(summary = \"Update customer\", description = \"Updates an existing customer with the provided details\")"},{"type":"INSERT","lineNumber":108,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":109,"content":"            @ApiResponse(responseCode = \"200\", description = \"Customer updated successfully\"),"},{"type":"INSERT","lineNumber":110,"content":"            @ApiResponse(responseCode = \"400\", description = \"Invalid input data\"),"},{"type":"INSERT","lineNumber":111,"content":"            @ApiResponse(responseCode = \"404\", description = \"Customer not found\"),"},{"type":"INSERT","lineNumber":112,"content":"            @ApiResponse(responseCode = \"409\", description = \"Customer with email already exists\")"},{"type":"INSERT","lineNumber":113,"content":"    })"},{"type":"INSERT","lineNumber":114,"content":"    public ResponseEntity<Customer> updateCustomer("},{"type":"INSERT","lineNumber":115,"content":"            @Parameter(description = \"Customer ID\") @PathVariable UUID id,"},{"type":"INSERT","lineNumber":116,"content":"            @Valid @RequestBody Customer customer) {"},{"type":"INSERT","lineNumber":117,"content":"        log.info(\"Request to update customer with ID: {}\", id);"},{"type":"INSERT","lineNumber":118,"content":"        try {"},{"type":"INSERT","lineNumber":119,"content":"            Customer updatedCustomer = customerService.updateCustomer(id, customer);"},{"type":"INSERT","lineNumber":120,"content":"            return ResponseEntity.ok(updatedCustomer);"},{"type":"INSERT","lineNumber":121,"content":"        } catch (RuntimeException e) {"},{"type":"INSERT","lineNumber":122,"content":"            log.error(\"Error updating customer: {}\", e.getMessage());"},{"type":"INSERT","lineNumber":123,"content":"            if (e.getMessage().contains(\"not found\")) {"},{"type":"INSERT","lineNumber":124,"content":"                return ResponseEntity.notFound().build();"},{"type":"INSERT","lineNumber":125,"content":"            }"},{"type":"INSERT","lineNumber":126,"content":"            return ResponseEntity.status(HttpStatus.CONFLICT).build();"},{"type":"INSERT","lineNumber":127,"content":"        }"},{"type":"INSERT","lineNumber":128,"content":"    }"},{"type":"INSERT","lineNumber":129,"content":""},{"type":"INSERT","lineNumber":130,"content":"    @DeleteMapping(\"/{id}\")"},{"type":"INSERT","lineNumber":131,"content":"    @Operation(summary = \"Delete customer\", description = \"Deletes a customer by their ID\")"},{"type":"INSERT","lineNumber":132,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":133,"content":"            @ApiResponse(responseCode = \"204\", description = \"Customer deleted successfully\"),"},{"type":"INSERT","lineNumber":134,"content":"            @ApiResponse(responseCode = \"404\", description = \"Customer not found\")"},{"type":"INSERT","lineNumber":135,"content":"    })"},{"type":"INSERT","lineNumber":136,"content":"    public ResponseEntity<Void> deleteCustomer("},{"type":"INSERT","lineNumber":137,"content":"            @Parameter(description = \"Customer ID\") @PathVariable UUID id) {"},{"type":"INSERT","lineNumber":138,"content":"        log.info(\"Request to delete customer with ID: {}\", id);"},{"type":"INSERT","lineNumber":139,"content":"        try {"},{"type":"INSERT","lineNumber":140,"content":"            customerService.deleteCustomer(id);"},{"type":"INSERT","lineNumber":141,"content":"            return ResponseEntity.noContent().build();"},{"type":"INSERT","lineNumber":142,"content":"        } catch (RuntimeException e) {"},{"type":"INSERT","lineNumber":143,"content":"            log.error(\"Error deleting customer: {}\", e.getMessage());"},{"type":"INSERT","lineNumber":144,"content":"            return ResponseEntity.notFound().build();"},{"type":"INSERT","lineNumber":145,"content":"        }"},{"type":"INSERT","lineNumber":146,"content":"    }"},{"type":"INSERT","lineNumber":147,"content":""},{"type":"INSERT","lineNumber":148,"content":"    @GetMapping(\"/{id}/exists\")"},{"type":"INSERT","lineNumber":149,"content":"    @Operation(summary = \"Check if customer exists\", description = \"Checks if a customer exists by their ID\")"},{"type":"INSERT","lineNumber":150,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":151,"content":"            @ApiResponse(responseCode = \"200\", description = \"Check completed\")"},{"type":"INSERT","lineNumber":152,"content":"    })"},{"type":"INSERT","lineNumber":153,"content":"    public ResponseEntity<Boolean> customerExists("},{"type":"INSERT","lineNumber":154,"content":"            @Parameter(description = \"Customer ID\") @PathVariable UUID id) {"},{"type":"INSERT","lineNumber":155,"content":"        log.info(\"Request to check if customer exists with ID: {}\", id);"},{"type":"INSERT","lineNumber":156,"content":"        boolean exists = customerService.getCustomerById(id).isPresent();"},{"type":"INSERT","lineNumber":157,"content":"        return ResponseEntity.ok(exists);"},{"type":"INSERT","lineNumber":158,"content":"    }"},{"type":"INSERT","lineNumber":159,"content":"}"}]},{"timestamp":1758554199600,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"public class CustomerController {"},{"type":"DELETE","lineNumber":6,"oldContent":""},{"type":"DELETE","lineNumber":8,"oldContent":"}"},{"type":"DELETE","lineNumber":10,"oldContent":"    }"},{"type":"DELETE","lineNumber":12,"oldContent":"        return ResponseEntity.ok(exists);"},{"type":"DELETE","lineNumber":14,"oldContent":"        boolean exists = customerService.getCustomerById(id).isPresent();"},{"type":"DELETE","lineNumber":16,"oldContent":"        log.info(\"Request to check if customer exists with ID: {}\", id);"},{"type":"DELETE","lineNumber":18,"oldContent":"            @Parameter(description = \"Customer ID\") @PathVariable UUID id) {"},{"type":"DELETE","lineNumber":20,"oldContent":"    public ResponseEntity<Boolean> customerExists("},{"type":"DELETE","lineNumber":22,"oldContent":"    })"},{"type":"DELETE","lineNumber":24,"oldContent":"            @ApiResponse(responseCode = \"200\", description = \"Check completed\")"},{"type":"DELETE","lineNumber":26,"oldContent":"    @ApiResponses(value = {"},{"type":"DELETE","lineNumber":28,"oldContent":"    @Operation(summary = \"Check if customer exists\", description = \"Checks if a customer exists by their ID\")"},{"type":"DELETE","lineNumber":30,"oldContent":"    @GetMapping(\"/{id}/exists\")"},{"type":"DELETE","lineNumber":32,"oldContent":""},{"type":"DELETE","lineNumber":34,"oldContent":"    }"},{"type":"DELETE","lineNumber":36,"oldContent":"        }"},{"type":"DELETE","lineNumber":38,"oldContent":"            return ResponseEntity.notFound().build();"},{"type":"DELETE","lineNumber":40,"oldContent":"            log.error(\"Error deleting customer: {}\", e.getMessage());"},{"type":"DELETE","lineNumber":42,"oldContent":"        } catch (RuntimeException e) {"},{"type":"DELETE","lineNumber":44,"oldContent":"            return ResponseEntity.noContent().build();"},{"type":"DELETE","lineNumber":46,"oldContent":"            customerService.deleteCustomer(id);"},{"type":"DELETE","lineNumber":48,"oldContent":"        try {"},{"type":"DELETE","lineNumber":50,"oldContent":"        log.info(\"Request to delete customer with ID: {}\", id);"},{"type":"DELETE","lineNumber":52,"oldContent":"            @Parameter(description = \"Customer ID\") @PathVariable UUID id) {"},{"type":"DELETE","lineNumber":53,"oldContent":"    public ResponseEntity<Void> deleteCustomer("},{"type":"DELETE","lineNumber":54,"oldContent":"    })"},{"type":"INSERT","lineNumber":28,"content":"public class CustomerController {"},{"type":"INSERT","lineNumber":29,"content":""},{"type":"DELETE","lineNumber":56,"oldContent":"            @ApiResponse(responseCode = \"404\", description = \"Customer not found\")"},{"type":"DELETE","lineNumber":58,"oldContent":"            @ApiResponse(responseCode = \"204\", description = \"Customer deleted successfully\"),"},{"type":"DELETE","lineNumber":60,"oldContent":"    @ApiResponses(value = {"},{"type":"DELETE","lineNumber":62,"oldContent":"    @Operation(summary = \"Delete customer\", description = \"Deletes a customer by their ID\")"},{"type":"DELETE","lineNumber":64,"oldContent":"    @DeleteMapping(\"/{id}\")"},{"type":"DELETE","lineNumber":66,"oldContent":""},{"type":"DELETE","lineNumber":68,"oldContent":"    }"},{"type":"DELETE","lineNumber":70,"oldContent":"        }"},{"type":"DELETE","lineNumber":72,"oldContent":"            return ResponseEntity.status(HttpStatus.CONFLICT).build();"},{"type":"DELETE","lineNumber":74,"oldContent":"            }"},{"type":"DELETE","lineNumber":76,"oldContent":"                return ResponseEntity.notFound().build();"},{"type":"DELETE","lineNumber":78,"oldContent":"            if (e.getMessage().contains(\"not found\")) {"},{"type":"DELETE","lineNumber":80,"oldContent":"            log.error(\"Error updating customer: {}\", e.getMessage());"},{"type":"DELETE","lineNumber":83,"oldContent":"        } catch (RuntimeException e) {"},{"type":"DELETE","lineNumber":84,"oldContent":"            return ResponseEntity.ok(updatedCustomer);"},{"type":"DELETE","lineNumber":86,"oldContent":"            Customer updatedCustomer = customerService.updateCustomer(id, customer);"},{"type":"DELETE","lineNumber":88,"oldContent":"        try {"},{"type":"DELETE","lineNumber":90,"oldContent":"        log.info(\"Request to update customer with ID: {}\", id);"},{"type":"DELETE","lineNumber":92,"oldContent":"            @Valid @RequestBody Customer customer) {"},{"type":"DELETE","lineNumber":94,"oldContent":"            @Parameter(description = \"Customer ID\") @PathVariable UUID id,"},{"type":"DELETE","lineNumber":96,"oldContent":"    public ResponseEntity<Customer> updateCustomer("},{"type":"DELETE","lineNumber":98,"oldContent":"    })"},{"type":"DELETE","lineNumber":100,"oldContent":"            @ApiResponse(responseCode = \"409\", description = \"Customer with email already exists\")"},{"type":"DELETE","lineNumber":102,"oldContent":"            @ApiResponse(responseCode = \"404\", description = \"Customer not found\"),"},{"type":"DELETE","lineNumber":104,"oldContent":"            @ApiResponse(responseCode = \"400\", description = \"Invalid input data\"),"},{"type":"DELETE","lineNumber":106,"oldContent":"            @ApiResponse(responseCode = \"200\", description = \"Customer updated successfully\"),"},{"type":"DELETE","lineNumber":107,"oldContent":"    public ResponseEntity<Customer> getCustomerById("},{"type":"DELETE","lineNumber":108,"oldContent":"    @ApiResponses(value = {"},{"type":"DELETE","lineNumber":109,"oldContent":"            @Parameter(description = \"Customer ID\") @PathVariable UUID id) {"},{"type":"DELETE","lineNumber":110,"oldContent":"    @Operation(summary = \"Update customer\", description = \"Updates an existing customer with the provided details\")"},{"type":"INSERT","lineNumber":56,"content":"    public ResponseEntity<Customer> getCustomerById(            @Parameter(description = \"Customer ID\") @PathVariable UUID id) {"},{"type":"DELETE","lineNumber":112,"oldContent":"    @PutMapping(\"/{id}\")"},{"type":"DELETE","lineNumber":114,"oldContent":""},{"type":"DELETE","lineNumber":116,"oldContent":"    }"},{"type":"DELETE","lineNumber":118,"oldContent":"        return ResponseEntity.ok(customers);"},{"type":"DELETE","lineNumber":121,"oldContent":""},{"type":"DELETE","lineNumber":122,"oldContent":"        Page<Customer> customers = customerService.getAllCustomers(pageable);"},{"type":"DELETE","lineNumber":124,"oldContent":"        Pageable pageable = PageRequest.of(page, size, sort);"},{"type":"DELETE","lineNumber":126,"oldContent":"                Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();"},{"type":"DELETE","lineNumber":128,"oldContent":"        Sort sort = sortDir.equalsIgnoreCase(\"desc\") ?"},{"type":"DELETE","lineNumber":130,"oldContent":""},{"type":"DELETE","lineNumber":132,"oldContent":"        }"},{"type":"DELETE","lineNumber":134,"oldContent":"            return ResponseEntity.ok(customers);"},{"type":"DELETE","lineNumber":136,"oldContent":"            List<Customer> customers = customerService.getAllCustomers();"},{"type":"DELETE","lineNumber":138,"oldContent":"        if (!paginated) {"},{"type":"DELETE","lineNumber":140,"oldContent":""},{"type":"DELETE","lineNumber":142,"oldContent":"                page, size, sortBy, sortDir, paginated);"},{"type":"DELETE","lineNumber":144,"oldContent":"        log.info(\"Request to get all customers - page: {}, size: {}, sortBy: {}, sortDir: {}, paginated: {}\","},{"type":"DELETE","lineNumber":146,"oldContent":""},{"type":"DELETE","lineNumber":148,"oldContent":"            @Parameter(description = \"Enable pagination\") @RequestParam(defaultValue = \"true\") boolean paginated) {"},{"type":"DELETE","lineNumber":150,"oldContent":"            @Parameter(description = \"Sort direction\") @RequestParam(defaultValue = \"desc\") String sortDir,"},{"type":"DELETE","lineNumber":152,"oldContent":"            @Parameter(description = \"Sort by field\") @RequestParam(defaultValue = \"createdAt\") String sortBy,"},{"type":"DELETE","lineNumber":154,"oldContent":"            @Parameter(description = \"Page size\") @RequestParam(defaultValue = \"10\") int size,"},{"type":"DELETE","lineNumber":156,"oldContent":"            @Parameter(description = \"Page number (0-based)\") @RequestParam(defaultValue = \"0\") int page,"},{"type":"INSERT","lineNumber":81,"content":"    })"},{"type":"INSERT","lineNumber":83,"content":"            @Parameter(description = \"Page number (0-based)\") @RequestParam(defaultValue = \"0\") int page,"},{"type":"INSERT","lineNumber":84,"content":"            @Parameter(description = \"Page size\") @RequestParam(defaultValue = \"10\") int size,"},{"type":"INSERT","lineNumber":85,"content":"            @Parameter(description = \"Sort by field\") @RequestParam(defaultValue = \"createdAt\") String sortBy,"},{"type":"INSERT","lineNumber":86,"content":"            @Parameter(description = \"Sort direction\") @RequestParam(defaultValue = \"desc\") String sortDir,"},{"type":"INSERT","lineNumber":87,"content":"            @Parameter(description = \"Enable pagination\") @RequestParam(defaultValue = \"true\") boolean paginated) {"},{"type":"INSERT","lineNumber":88,"content":""},{"type":"INSERT","lineNumber":89,"content":"        log.info(\"Request to get all customers - page: {}, size: {}, sortBy: {}, sortDir: {}, paginated: {}\","},{"type":"INSERT","lineNumber":90,"content":"                page, size, sortBy, sortDir, paginated);"},{"type":"INSERT","lineNumber":91,"content":""},{"type":"INSERT","lineNumber":92,"content":"        if (!paginated) {"},{"type":"INSERT","lineNumber":93,"content":"            List<Customer> customers = customerService.getAllCustomers();"},{"type":"INSERT","lineNumber":94,"content":"            return ResponseEntity.ok(customers);"},{"type":"INSERT","lineNumber":95,"content":"        }"},{"type":"INSERT","lineNumber":96,"content":""},{"type":"INSERT","lineNumber":97,"content":"        Sort sort = sortDir.equalsIgnoreCase(\"desc\") ?"},{"type":"INSERT","lineNumber":98,"content":"                Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();"},{"type":"INSERT","lineNumber":99,"content":"        Pageable pageable = PageRequest.of(page, size, sort);"},{"type":"INSERT","lineNumber":100,"content":"        Page<Customer> customers = customerService.getAllCustomers(pageable);"},{"type":"INSERT","lineNumber":101,"content":""},{"type":"INSERT","lineNumber":102,"content":"        return ResponseEntity.ok(customers);"},{"type":"INSERT","lineNumber":103,"content":"    }"},{"type":"INSERT","lineNumber":104,"content":""},{"type":"INSERT","lineNumber":105,"content":"    @PutMapping(\"/{id}\")"},{"type":"INSERT","lineNumber":106,"content":"    @Operation(summary = \"Update customer\", description = \"Updates an existing customer with the provided details\")"},{"type":"INSERT","lineNumber":107,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":108,"content":"            @ApiResponse(responseCode = \"200\", description = \"Customer updated successfully\"),"},{"type":"INSERT","lineNumber":109,"content":"            @ApiResponse(responseCode = \"400\", description = \"Invalid input data\"),"},{"type":"INSERT","lineNumber":110,"content":"            @ApiResponse(responseCode = \"404\", description = \"Customer not found\"),"},{"type":"INSERT","lineNumber":111,"content":"            @ApiResponse(responseCode = \"409\", description = \"Customer with email already exists\")"},{"type":"INSERT","lineNumber":113,"content":"    public ResponseEntity<Customer> updateCustomer("},{"type":"INSERT","lineNumber":114,"content":"            @Parameter(description = \"Customer ID\") @PathVariable UUID id,"},{"type":"INSERT","lineNumber":115,"content":"            @Valid @RequestBody Customer customer) {"},{"type":"INSERT","lineNumber":116,"content":"        log.info(\"Request to update customer with ID: {}\", id);"},{"type":"INSERT","lineNumber":117,"content":"        try {"},{"type":"INSERT","lineNumber":118,"content":"            Customer updatedCustomer = customerService.updateCustomer(id, customer);"},{"type":"INSERT","lineNumber":119,"content":"            return ResponseEntity.ok(updatedCustomer);"},{"type":"INSERT","lineNumber":120,"content":"        } catch (RuntimeException e) {"},{"type":"INSERT","lineNumber":121,"content":"            log.error(\"Error updating customer: {}\", e.getMessage());"},{"type":"INSERT","lineNumber":122,"content":"            if (e.getMessage().contains(\"not found\")) {"},{"type":"INSERT","lineNumber":123,"content":"                return ResponseEntity.notFound().build();"},{"type":"INSERT","lineNumber":124,"content":"            }"},{"type":"INSERT","lineNumber":125,"content":"            return ResponseEntity.status(HttpStatus.CONFLICT).build();"},{"type":"INSERT","lineNumber":126,"content":"        }"},{"type":"INSERT","lineNumber":127,"content":"    }"},{"type":"INSERT","lineNumber":128,"content":""},{"type":"INSERT","lineNumber":129,"content":"    @DeleteMapping(\"/{id}\")"},{"type":"INSERT","lineNumber":130,"content":"    @Operation(summary = \"Delete customer\", description = \"Deletes a customer by their ID\")"},{"type":"INSERT","lineNumber":131,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":132,"content":"            @ApiResponse(responseCode = \"204\", description = \"Customer deleted successfully\"),"},{"type":"INSERT","lineNumber":133,"content":"            @ApiResponse(responseCode = \"404\", description = \"Customer not found\")"},{"type":"INSERT","lineNumber":134,"content":"    })"},{"type":"INSERT","lineNumber":135,"content":"    public ResponseEntity<Void> deleteCustomer("},{"type":"INSERT","lineNumber":136,"content":"            @Parameter(description = \"Customer ID\") @PathVariable UUID id) {"},{"type":"INSERT","lineNumber":137,"content":"        log.info(\"Request to delete customer with ID: {}\", id);"},{"type":"INSERT","lineNumber":138,"content":"        try {"},{"type":"INSERT","lineNumber":139,"content":"            customerService.deleteCustomer(id);"},{"type":"INSERT","lineNumber":140,"content":"            return ResponseEntity.noContent().build();"},{"type":"INSERT","lineNumber":141,"content":"        } catch (RuntimeException e) {"},{"type":"INSERT","lineNumber":142,"content":"            log.error(\"Error deleting customer: {}\", e.getMessage());"},{"type":"INSERT","lineNumber":143,"content":"            return ResponseEntity.notFound().build();"},{"type":"INSERT","lineNumber":144,"content":"        }"},{"type":"INSERT","lineNumber":145,"content":"    }"},{"type":"INSERT","lineNumber":146,"content":""},{"type":"INSERT","lineNumber":147,"content":"    @GetMapping(\"/{id}/exists\")"},{"type":"INSERT","lineNumber":148,"content":"    @Operation(summary = \"Check if customer exists\", description = \"Checks if a customer exists by their ID\")"},{"type":"INSERT","lineNumber":149,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":150,"content":"            @ApiResponse(responseCode = \"200\", description = \"Check completed\")"},{"type":"INSERT","lineNumber":151,"content":"    })"},{"type":"INSERT","lineNumber":152,"content":"    public ResponseEntity<Boolean> customerExists("},{"type":"INSERT","lineNumber":153,"content":"            @Parameter(description = \"Customer ID\") @PathVariable UUID id) {"},{"type":"INSERT","lineNumber":154,"content":"        log.info(\"Request to check if customer exists with ID: {}\", id);"},{"type":"INSERT","lineNumber":155,"content":"        boolean exists = customerService.getCustomerById(id).isPresent();"},{"type":"INSERT","lineNumber":156,"content":"        return ResponseEntity.ok(exists);"},{"type":"INSERT","lineNumber":157,"content":"    }"},{"type":"INSERT","lineNumber":158,"content":"}"}]},{"timestamp":1758554204907,"changes":[{"type":"DELETE","lineNumber":16,"oldContent":"public class CustomerController {"},{"type":"DELETE","lineNumber":17,"oldContent":""},{"type":"INSERT","lineNumber":28,"content":"public class CustomerController {"},{"type":"INSERT","lineNumber":29,"content":""},{"type":"DELETE","lineNumber":31,"oldContent":"    public ResponseEntity<Customer> getCustomerById(            @Parameter(description = \"Customer ID\") @PathVariable UUID id) {"},{"type":"DELETE","lineNumber":44,"oldContent":"    })"},{"type":"INSERT","lineNumber":45,"content":"            log.error(\"Error creating customer: {}\", e.getMessage());"},{"type":"INSERT","lineNumber":46,"content":"            return ResponseEntity.status(HttpStatus.CONFLICT).build();"},{"type":"INSERT","lineNumber":47,"content":"        }"},{"type":"INSERT","lineNumber":48,"content":"    }"},{"type":"INSERT","lineNumber":49,"content":""},{"type":"INSERT","lineNumber":50,"content":"    @GetMapping(\"/{id}\")"},{"type":"INSERT","lineNumber":51,"content":"    @Operation(summary = \"Get customer by ID\", description = \"Retrieves a customer by their unique ID\")"},{"type":"INSERT","lineNumber":52,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":53,"content":"            @ApiResponse(responseCode = \"200\", description = \"Customer found\"),"},{"type":"INSERT","lineNumber":54,"content":"            @ApiResponse(responseCode = \"404\", description = \"Customer not found\")"},{"type":"INSERT","lineNumber":55,"content":"    })"},{"type":"INSERT","lineNumber":56,"content":"    public ResponseEntity<Customer> getCustomerById(@Parameter(description = \"Customer ID\") @PathVariable UUID id) {"},{"type":"INSERT","lineNumber":57,"content":"        log.info(\"Request to get customer by ID: {}\", id);"},{"type":"INSERT","lineNumber":58,"content":"        return customerService.getCustomerById(id)"},{"type":"INSERT","lineNumber":59,"content":"                .map(customer -> ResponseEntity.ok(customer))"},{"type":"INSERT","lineNumber":60,"content":"                .orElse(ResponseEntity.notFound().build());"},{"type":"INSERT","lineNumber":61,"content":"    }"},{"type":"INSERT","lineNumber":62,"content":""},{"type":"INSERT","lineNumber":63,"content":"    @GetMapping(\"/email/{email}\")"},{"type":"INSERT","lineNumber":64,"content":"    @Operation(summary = \"Get customer by email\", description = \"Retrieves a customer by their email address\")"},{"type":"INSERT","lineNumber":65,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":66,"content":"            @ApiResponse(responseCode = \"200\", description = \"Customer found\"),"},{"type":"INSERT","lineNumber":67,"content":"            @ApiResponse(responseCode = \"404\", description = \"Customer not found\")"},{"type":"INSERT","lineNumber":68,"content":"    })"},{"type":"INSERT","lineNumber":69,"content":"    public ResponseEntity<Customer> getCustomerByEmail("},{"type":"INSERT","lineNumber":70,"content":"            @Parameter(description = \"Customer email\") @PathVariable String email) {"},{"type":"INSERT","lineNumber":71,"content":"        log.info(\"Request to get customer by email: {}\", email);"},{"type":"INSERT","lineNumber":72,"content":"        return customerService.getCustomerByEmail(email)"},{"type":"INSERT","lineNumber":73,"content":"                .map(customer -> ResponseEntity.ok(customer))"},{"type":"INSERT","lineNumber":74,"content":"                .orElse(ResponseEntity.notFound().build());"},{"type":"INSERT","lineNumber":75,"content":"    }"},{"type":"INSERT","lineNumber":76,"content":""},{"type":"INSERT","lineNumber":77,"content":"    @GetMapping"},{"type":"INSERT","lineNumber":78,"content":"    @Operation(summary = \"Get all customers\", description = \"Retrieves all customers with optional pagination\")"},{"type":"INSERT","lineNumber":79,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":80,"content":"            @ApiResponse(responseCode = \"200\", description = \"Customers retrieved successfully\")"},{"type":"INSERT","lineNumber":81,"content":"    })"},{"type":"INSERT","lineNumber":82,"content":"    public ResponseEntity<?> getAllCustomers("},{"type":"DELETE","lineNumber":50,"oldContent":"            log.error(\"Error creating customer: {}\", e.getMessage());"},{"type":"DELETE","lineNumber":53,"oldContent":"            return ResponseEntity.status(HttpStatus.CONFLICT).build();"},{"type":"DELETE","lineNumber":56,"oldContent":"        }"},{"type":"DELETE","lineNumber":59,"oldContent":"    }"},{"type":"DELETE","lineNumber":62,"oldContent":""},{"type":"DELETE","lineNumber":65,"oldContent":"    @GetMapping(\"/{id}\")"},{"type":"DELETE","lineNumber":68,"oldContent":"    @Operation(summary = \"Get customer by ID\", description = \"Retrieves a customer by their unique ID\")"},{"type":"DELETE","lineNumber":71,"oldContent":"    @ApiResponses(value = {"},{"type":"DELETE","lineNumber":74,"oldContent":"            @ApiResponse(responseCode = \"200\", description = \"Customer found\"),"},{"type":"DELETE","lineNumber":77,"oldContent":"            @ApiResponse(responseCode = \"404\", description = \"Customer not found\")"},{"type":"DELETE","lineNumber":80,"oldContent":"    })"},{"type":"DELETE","lineNumber":87,"oldContent":"        log.info(\"Request to get customer by ID: {}\", id);"},{"type":"INSERT","lineNumber":112,"content":"    })"},{"type":"DELETE","lineNumber":89,"oldContent":"        return customerService.getCustomerById(id)"},{"type":"DELETE","lineNumber":92,"oldContent":"                .map(customer -> ResponseEntity.ok(customer))"},{"type":"DELETE","lineNumber":95,"oldContent":"                .orElse(ResponseEntity.notFound().build());"},{"type":"DELETE","lineNumber":98,"oldContent":"    }"},{"type":"DELETE","lineNumber":100,"oldContent":""},{"type":"DELETE","lineNumber":104,"oldContent":"    @GetMapping(\"/email/{email}\")"},{"type":"DELETE","lineNumber":107,"oldContent":"    @Operation(summary = \"Get customer by email\", description = \"Retrieves a customer by their email address\")"},{"type":"DELETE","lineNumber":110,"oldContent":"    @ApiResponses(value = {"},{"type":"DELETE","lineNumber":113,"oldContent":"            @ApiResponse(responseCode = \"200\", description = \"Customer found\"),"},{"type":"DELETE","lineNumber":116,"oldContent":"            @ApiResponse(responseCode = \"404\", description = \"Customer not found\")"},{"type":"DELETE","lineNumber":120,"oldContent":"    })"},{"type":"DELETE","lineNumber":122,"oldContent":"    public ResponseEntity<Customer> getCustomerByEmail("},{"type":"DELETE","lineNumber":125,"oldContent":"            @Parameter(description = \"Customer email\") @PathVariable String email) {"},{"type":"DELETE","lineNumber":128,"oldContent":"        log.info(\"Request to get customer by email: {}\", email);"},{"type":"DELETE","lineNumber":131,"oldContent":"        return customerService.getCustomerByEmail(email)"},{"type":"DELETE","lineNumber":134,"oldContent":"                .map(customer -> ResponseEntity.ok(customer))"},{"type":"DELETE","lineNumber":137,"oldContent":"                .orElse(ResponseEntity.notFound().build());"},{"type":"DELETE","lineNumber":140,"oldContent":"    }"},{"type":"DELETE","lineNumber":143,"oldContent":""},{"type":"DELETE","lineNumber":146,"oldContent":"    @GetMapping"},{"type":"DELETE","lineNumber":149,"oldContent":"    @Operation(summary = \"Get all customers\", description = \"Retrieves all customers with optional pagination\")"},{"type":"DELETE","lineNumber":152,"oldContent":"    @ApiResponses(value = {"},{"type":"DELETE","lineNumber":155,"oldContent":"            @ApiResponse(responseCode = \"200\", description = \"Customers retrieved successfully\")"},{"type":"DELETE","lineNumber":157,"oldContent":"    public ResponseEntity<?> getAllCustomers("},{"type":"DELETE","lineNumber":158,"oldContent":"    })"}]}]},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/core/dto/Customer.java":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/core/dto/Customer.java","baseContent":"package com.sprout.AKMS.core.dto;\n\npublic class Customer {\n}\n","baseTimestamp":1758549684676,"deltas":[{"timestamp":1758552257627,"changes":[{"type":"INSERT","lineNumber":2,"content":"import jakarta.validation.constraints.Email;"},{"type":"INSERT","lineNumber":3,"content":"import jakarta.validation.constraints.NotBlank;"},{"type":"INSERT","lineNumber":4,"content":"import jakarta.validation.constraints.Size;"},{"type":"INSERT","lineNumber":5,"content":"import lombok.AllArgsConstructor;"},{"type":"INSERT","lineNumber":6,"content":"import lombok.Builder;"},{"type":"INSERT","lineNumber":7,"content":"import lombok.Data;"},{"type":"INSERT","lineNumber":8,"content":"import lombok.NoArgsConstructor;"},{"type":"INSERT","lineNumber":9,"content":""},{"type":"INSERT","lineNumber":10,"content":"import java.time.LocalDateTime;"},{"type":"INSERT","lineNumber":11,"content":"import java.util.UUID;"},{"type":"INSERT","lineNumber":12,"content":""},{"type":"INSERT","lineNumber":13,"content":"@Data"},{"type":"INSERT","lineNumber":14,"content":"@Builder"},{"type":"INSERT","lineNumber":15,"content":"@NoArgsConstructor"},{"type":"INSERT","lineNumber":16,"content":"@AllArgsConstructor"},{"type":"DELETE","lineNumber":3,"oldContent":"}"},{"type":"INSERT","lineNumber":18,"content":"    private UUID id;"},{"type":"INSERT","lineNumber":20,"content":"    @NotBlank(message = \"Name is required\")"},{"type":"INSERT","lineNumber":21,"content":"    @Size(max = 100, message = \"Name must not exceed 100 characters\")"},{"type":"INSERT","lineNumber":22,"content":"    private String name;"},{"type":"INSERT","lineNumber":23,"content":""},{"type":"INSERT","lineNumber":24,"content":"    @NotBlank(message = \"Email is required\")"},{"type":"INSERT","lineNumber":25,"content":"    @Email(message = \"Email should be valid\")"},{"type":"INSERT","lineNumber":26,"content":"    @Size(max = 150, message = \"Email must not exceed 150 characters\")"},{"type":"INSERT","lineNumber":27,"content":"    private String email;"},{"type":"INSERT","lineNumber":28,"content":""},{"type":"INSERT","lineNumber":29,"content":"    private LocalDateTime createdAt;"},{"type":"INSERT","lineNumber":30,"content":"    private LocalDateTime updatedAt;"},{"type":"INSERT","lineNumber":31,"content":"}"}]}]},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/core/dto/ApiKey.java":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/core/dto/ApiKey.java","baseContent":"package com.akms.dto;\n\nimport lombok.Data;\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@Data\npublic class GenerateKeyRequest {\n    private String customerId;\n    private String name;\n    private List<String> permissions;\n    private Integer rateLimit;\n    private LocalDateTime expiryDate;\n}\n","baseTimestamp":1758549688437,"deltas":[{"timestamp":1758549693867,"changes":[{"type":"MODIFY","lineNumber":7,"content":"public class ApiKey {","oldContent":"public class GenerateKeyRequest {"}]},{"timestamp":1758549699131,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package com.sprouts.akms.dto;","oldContent":"package com.akms.dto;"}]},{"timestamp":1758549711213,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package com.sprouts.AKMS.dto;","oldContent":"package com.sprouts.akms.dto;"}]},{"timestamp":1758549716284,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package com.sprouts.AKMS.core.dto;","oldContent":"package com.sprouts.AKMS.dto;"}]},{"timestamp":1758549724579,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"package com.sprouts.AKMS.core.dto;"}]},{"timestamp":1758549727174,"changes":[{"type":"INSERT","lineNumber":1,"content":""}]},{"timestamp":1758549747120,"changes":[{"type":"INSERT","lineNumber":0,"content":"package com.sprouts.AKMS."},{"type":"DELETE","lineNumber":1,"oldContent":""}]},{"timestamp":1758549753355,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package com.sprouts.AKMS.dt","oldContent":"package com.sprouts.AKMS."}]},{"timestamp":1758549759468,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package com.sprouts.AKMS.core.dto;","oldContent":"package com.sprouts.AKMS.dt"}]},{"timestamp":1758549768613,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package com.sprout.AKMS.core.dto;","oldContent":"package com.sprouts.AKMS.core.dto;"}]},{"timestamp":1758552675653,"changes":[{"type":"MODIFY","lineNumber":7,"content":"@Builder","oldContent":"public class ApiKey {"},{"type":"INSERT","lineNumber":8,"content":"@NoArgsConstructor"},{"type":"INSERT","lineNumber":9,"content":"@AllArgsConstructorpublic class ApiKey {"}]},{"timestamp":1758552677815,"changes":[{"type":"DELETE","lineNumber":7,"oldContent":"@Builder"},{"type":"DELETE","lineNumber":8,"oldContent":"@NoArgsConstructor"},{"type":"INSERT","lineNumber":7,"content":"public class ApiKey {"},{"type":"DELETE","lineNumber":10,"oldContent":"@AllArgsConstructorpublic class ApiKey {"}]},{"timestamp":1758552681349,"changes":[{"type":"INSERT","lineNumber":7,"content":"@Builder"},{"type":"INSERT","lineNumber":8,"content":"@NoArgsConstructor"},{"type":"INSERT","lineNumber":9,"content":"@AllArgsConstructor"}]},{"timestamp":1758552686684,"changes":[{"type":"INSERT","lineNumber":3,"content":"import lombok.NoArgsConstructor;"},{"type":"INSERT","lineNumber":4,"content":""},{"type":"DELETE","lineNumber":8,"oldContent":"public class ApiKey {"},{"type":"DELETE","lineNumber":10,"oldContent":"    private String customerId;"},{"type":"INSERT","lineNumber":12,"content":"public class ApiKey {"},{"type":"INSERT","lineNumber":13,"content":"    private String customerId;"}]},{"timestamp":1758552694035,"changes":[{"type":"INSERT","lineNumber":2,"content":"import lombok.AllArgsConstructor;"},{"type":"INSERT","lineNumber":3,"content":"import lombok.Builder;"},{"type":"DELETE","lineNumber":4,"oldContent":"import java.time.LocalDateTime;"},{"type":"INSERT","lineNumber":7,"content":"import java.time.LocalDateTime;"},{"type":"DELETE","lineNumber":13,"oldContent":"    private String name;"},{"type":"INSERT","lineNumber":16,"content":"    private String name;"}]},{"timestamp":1758552727008,"changes":[{"type":"MODIFY","lineNumber":4,"content":"import lombok.Data;","oldContent":"import lombok.Data;"},{"type":"MODIFY","lineNumber":8,"content":"import java.util.List;","oldContent":"import java.util.List;"},{"type":"INSERT","lineNumber":15,"content":"    private UUID id;"},{"type":"DELETE","lineNumber":16,"oldContent":"    private List<String> permissions;"},{"type":"INSERT","lineNumber":18,"content":"    private List<String> permissions;"}]},{"timestamp":1758552729834,"changes":[{"type":"INSERT","lineNumber":3,"content":"import lombok.Builder;"},{"type":"DELETE","lineNumber":4,"oldContent":"import lombok.Data;"},{"type":"INSERT","lineNumber":7,"content":"import java.time.LocalDateTime;"},{"type":"MODIFY","lineNumber":9,"content":"import java.util.UUID;","oldContent":"import java.util.List;"}]},{"timestamp":1758552784532,"changes":[{"type":"DELETE","lineNumber":9,"oldContent":"import java.util.List;"},{"type":"INSERT","lineNumber":10,"content":""},{"type":"INSERT","lineNumber":22,"content":"    // For response purposes - never expose the actual hash"},{"type":"INSERT","lineNumber":23,"content":"    private String maskedKey; // e.g., \"ak_****1234\""}]}]},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/controller/ApiKeyController.java":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/controller/ApiKeyController.java","baseContent":"package com.akms.controller;\n\nimport com.akms.dto.*;\nimport com.akms.entity.ApiKey;\nimport com.akms.entity.Customer;\nimport com.akms.repository.ApiKeyRepository;\nimport com.akms.repository.CustomerRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.security.crypto.bcrypt.BCrypt;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.*;\n\n@RestController\n@RequestMapping(\"/akms\")\n@RequiredArgsConstructor\npublic class ApiKeyController {\n\n    private final ApiKeyRepository apiKeyRepository;\n    private final CustomerRepository customerRepository;\n\n    // Validate API key\n    @PostMapping(\"/validate\")\n    public ValidateKeyResponse validateKey(@RequestBody ValidateKeyRequest request) {\n        return apiKeyRepository.findAll().stream()\n                .filter(key -> BCrypt.checkpw(request.getApiKey(), key.getApiKeyHash()))\n                .findFirst()\n                .map(key -> ValidateKeyResponse.builder()\n                        .valid(true)\n                        .customerId(key.getCustomer().getId().toString())\n                        .permissions(Arrays.asList(key.getPermissions().split(\",\")))\n                        .rateLimit(key.getRateLimit())\n                        .expiryDate(key.getExpiryDate())\n                        .build())\n                .orElse(ValidateKeyResponse.builder()\n                        .valid(false)\n                        .reason(\"Invalid or expired key\")\n                        .build());\n    }\n\n    // Generate API key\n    @PostMapping(\"/keys\")\n    public Map<String, Object> generateKey(@RequestBody GenerateKeyRequest request) {\n        Customer customer = customerRepository.findById(UUID.fromString(request.getCustomerId()))\n                .orElseThrow(() -> new RuntimeException(\"Customer not found\"));\n\n        String rawKey = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String hashedKey = BCrypt.hashpw(rawKey, BCrypt.gensalt());\n\n        ApiKey apiKey = ApiKey.builder()\n                .customer(customer)\n                .apiKeyHash(hashedKey)\n                .name(request.getName())\n                .permissions(String.join(\",\", request.getPermissions()))\n                .rateLimit(request.getRateLimit())\n                .expiryDate(request.getExpiryDate())\n                .status(\"active\")\n                .build();\n\n        apiKeyRepository.save(apiKey);\n\n        Map<String, Object> response = new HashMap<>();\n        response.put(\"apiKey\", rawKey); // raw shown once\n        response.put(\"customerId\", customer.getId().toString());\n        response.put(\"status\", \"active\");\n\n        return response;\n    }\n\n    // Revoke API key\n    @PostMapping(\"/keys/{id}/revoke\")\n    public Map<String, String> revokeKey(@PathVariable UUID id) {\n        ApiKey key = apiKeyRepository.findById(id)\n                .orElseThrow(() -> new RuntimeException(\"API key not found\"));\n        key.setStatus(\"revoked\");\n        apiKeyRepository.save(key);\n\n        return Map.of(\"status\", \"revoked\", \"message\", \"API key revoked successfully\");\n    }\n\n    // List keys by customer\n    @GetMapping(\"/customers/{id}/keys\")\n    public List<Map<String, Object>> listKeys(@PathVariable UUID id) {\n        Customer customer = customerRepository.findById(id)\n                .orElseThrow(() -> new RuntimeException(\"Customer not found\"));\n        return apiKeyRepository.findAll().stream()\n                .filter(k -> k.getCustomer().getId().equals(customer.getId()))\n                .map(k -> Map.of(\n                        \"id\", k.getId().toString(),\n                        \"name\", k.getName(),\n                        \"status\", k.getStatus(),\n                        \"rateLimit\", k.getRateLimit(),\n                        \"expiryDate\", k.getExpiryDate() != null ? k.getExpiryDate().toString() : null\n                ))\n                .toList();\n    }\n}\n","baseTimestamp":1758549846039,"deltas":[{"timestamp":1758549886196,"changes":[{"type":"INSERT","lineNumber":3,"content":"import com.sprout.AKMS.core.entity.ApiKeyEntity;"},{"type":"DELETE","lineNumber":42,"oldContent":"        Customer customer = customerRepository.findById(UUID.fromString(request.getCustomerId()))"},{"type":"INSERT","lineNumber":44,"content":"                .orElseThrow(() -> new RuntimeException(\"Customer not found\"));"},{"type":"MODIFY","lineNumber":49,"content":"        ApiKeyEntity apiKey = ApiKey.builder()","oldContent":"        ApiKey apiKey = ApiKey.builder()"}]},{"timestamp":1758549889261,"changes":[{"type":"INSERT","lineNumber":3,"content":"import com.sprout.AKMS.core.dto.ApiKey;"},{"type":"DELETE","lineNumber":49,"oldContent":"        ApiKey apiKey = ApiKey.builder()"},{"type":"INSERT","lineNumber":51,"content":"                .customer(customer)"}]},{"timestamp":1758549897376,"changes":[{"type":"MODIFY","lineNumber":84,"content":"        CustomerEntity customer = customerRepository.findById(id)","oldContent":"        Customer customer = customerRepository.findById(id)"}]},{"timestamp":1758550289620,"changes":[{"type":"INSERT","lineNumber":4,"content":"import com.sprout.AKMS.core.dto.ValidateKeyResponse;"}]},{"timestamp":1758550294064,"changes":[{"type":"INSERT","lineNumber":4,"content":"import com.sprout.AKMS.core.dto.ValidateKeyRequest;"}]},{"timestamp":1758550298254,"changes":[{"type":"INSERT","lineNumber":4,"content":"import com.sprout.AKMS.core.dto.GenerateKeyRequest;"}]},{"timestamp":1758550318466,"changes":[{"type":"MODIFY","lineNumber":53,"content":"        ApiKeyEntity apiKey = ApiKeyEntity.builder()","oldContent":"        ApiKeyEntity apiKey = ApiKey.builder()"}]},{"timestamp":1758550332140,"changes":[{"type":"MODIFY","lineNumber":76,"content":"        ApiKeyEntity key = apiKeyRepository.findById(id)","oldContent":"        ApiKey key = apiKeyRepository.findById(id)"}]},{"timestamp":1758550352965,"changes":[{"type":"DELETE","lineNumber":97,"oldContent":"                ))"},{"type":"MODIFY","lineNumber":97,"content":"                )).toList();","oldContent":"                .toList();"}]},{"timestamp":1758550355070,"changes":[{"type":"MODIFY","lineNumber":97,"content":"                ))","oldContent":"                )).toList();"},{"type":"INSERT","lineNumber":98,"content":"                .toList();"}]},{"timestamp":1758550380605,"changes":[{"type":"INSERT","lineNumber":15,"content":"import java.io.Serializable;"},{"type":"MODIFY","lineNumber":87,"content":"    public List<Map<String,? extends Serializable>> listKeys(@PathVariable UUID id) {","oldContent":"    public List<Map<String, Object>> listKeys(@PathVariable UUID id) {"}]},{"timestamp":1758550390875,"changes":[{"type":"DELETE","lineNumber":15,"oldContent":"import java.io.Serializable;"},{"type":"DELETE","lineNumber":88,"oldContent":"    public List<Map<String,? extends Serializable>> listKeys(@PathVariable UUID id) {"},{"type":"INSERT","lineNumber":87,"content":"        CustomerEntity customer = customerRepository.findById(id)"}]},{"timestamp":1758550418030,"changes":[{"type":"MODIFY","lineNumber":87,"content":"        CustomerEntity customer = customerRepository.findById(id)","oldContent":"        CustomerEntity customer = customerRepository.findById(id)"},{"type":"MODIFY","lineNumber":91,"content":"                .map(k -> Map.<String, Object>of(","oldContent":"                .map(k -> Map.of("},{"type":"MODIFY","lineNumber":98,"content":"","oldContent":"                .toList();"}]},{"timestamp":1758550420158,"changes":[{"type":"INSERT","lineNumber":86,"content":"    public List<Map<String, Object>> listKeys(@PathVariable UUID id) {"},{"type":"DELETE","lineNumber":87,"oldContent":"        CustomerEntity customer = customerRepository.findById(id)"},{"type":"MODIFY","lineNumber":97,"content":"                ));","oldContent":"                ))"}]},{"timestamp":1758550427159,"changes":[{"type":"MODIFY","lineNumber":89,"content":"        return (List<Map<String, Object>>) apiKeyRepository.findAll().stream()","oldContent":"        return apiKeyRepository.findAll().stream()"}]},{"timestamp":1758550431853,"changes":[{"type":"MODIFY","lineNumber":89,"content":"        return apiKeyRepository.findAll().stream()","oldContent":"        return (List<Map<String, Object>>) apiKeyRepository.findAll().stream()"},{"type":"MODIFY","lineNumber":91,"content":"                .map(k -> Map.of(","oldContent":"                .map(k -> Map.<String, Object>of("},{"type":"DELETE","lineNumber":97,"oldContent":"                ));"},{"type":"DELETE","lineNumber":98,"oldContent":""},{"type":"INSERT","lineNumber":97,"content":"                ))"},{"type":"INSERT","lineNumber":98,"content":"                .toList();"}]},{"timestamp":1758550446777,"changes":[{"type":"MODIFY","lineNumber":2,"content":"","oldContent":"import com.akms.dto.*;"},{"type":"DELETE","lineNumber":11,"oldContent":"import com.akms.entity.ApiKey;"},{"type":"DELETE","lineNumber":12,"oldContent":"import com.akms.entity.Customer;"},{"type":"DELETE","lineNumber":13,"oldContent":"import com.akms.repository.ApiKeyRepository;"},{"type":"DELETE","lineNumber":14,"oldContent":"import com.akms.repository.CustomerRepository;"},{"type":"DELETE","lineNumber":47,"oldContent":"        CustomerEntity customer = customerRepository.findById(UUID.fromString(request.getCustomerId()))"},{"type":"DELETE","lineNumber":48,"oldContent":"                .orElseThrow(() -> new RuntimeException(\"Customer not found\"));"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"    // Generate API key"},{"type":"DELETE","lineNumber":51,"oldContent":"        Customer customer = customerRepository.findById(UUID.fromString(request.getCustomerId()))"},{"type":"INSERT","lineNumber":47,"content":"        CustomerEntity customer = customerRepository.findById(UUID.fromString(request.getCustomerId()))"},{"type":"DELETE","lineNumber":53,"oldContent":"        ApiKeyEntity apiKey = ApiKeyEntity.builder()"},{"type":"DELETE","lineNumber":54,"oldContent":"                .customer(customer)"},{"type":"INSERT","lineNumber":49,"content":""},{"type":"INSERT","lineNumber":50,"content":"        String rawKey = UUID.randomUUID().toString().replace(\"-\", \"\");"},{"type":"DELETE","lineNumber":57,"oldContent":"        ApiKey apiKey = ApiKey.builder()"},{"type":"INSERT","lineNumber":53,"content":"        ApiKeyEntity apiKey = ApiKeyEntity.builder()"},{"type":"DELETE","lineNumber":76,"oldContent":"        ApiKeyEntity key = apiKeyRepository.findById(id)"},{"type":"INSERT","lineNumber":72,"content":""},{"type":"DELETE","lineNumber":80,"oldContent":"        ApiKey key = apiKeyRepository.findById(id)"},{"type":"INSERT","lineNumber":76,"content":"        ApiKeyEntity key = apiKeyRepository.findById(id)"},{"type":"DELETE","lineNumber":86,"oldContent":"    public List<Map<String, Object>> listKeys(@PathVariable UUID id) {"},{"type":"DELETE","lineNumber":87,"oldContent":"        CustomerEntity customer = customerRepository.findById(id)"},{"type":"INSERT","lineNumber":82,"content":"    }"},{"type":"INSERT","lineNumber":83,"content":""},{"type":"DELETE","lineNumber":89,"oldContent":"        return apiKeyRepository.findAll().stream()"},{"type":"INSERT","lineNumber":85,"content":"    @GetMapping(\"/customers/{id}/keys\")"},{"type":"DELETE","lineNumber":91,"oldContent":"                .map(k -> Map.of("},{"type":"INSERT","lineNumber":87,"content":"        CustomerEntity customer = customerRepository.findById(id)"},{"type":"DELETE","lineNumber":95,"oldContent":"                .map(k -> Map.of("},{"type":"DELETE","lineNumber":96,"oldContent":"                        \"id\", k.getId().toString(),"},{"type":"DELETE","lineNumber":97,"oldContent":"                ))"},{"type":"DELETE","lineNumber":98,"oldContent":"                .toList();"},{"type":"DELETE","lineNumber":99,"oldContent":"                        \"rateLimit\", k.getRateLimit(),"},{"type":"DELETE","lineNumber":100,"oldContent":"                        \"expiryDate\", k.getExpiryDate() != null ? k.getExpiryDate().toString() : null"},{"type":"DELETE","lineNumber":101,"oldContent":"                ))"},{"type":"DELETE","lineNumber":102,"oldContent":"                .toList();"},{"type":"INSERT","lineNumber":91,"content":"                .map(k -> {"},{"type":"INSERT","lineNumber":92,"content":"                    Map<String, Object> map = new HashMap<>();"},{"type":"INSERT","lineNumber":93,"content":"                    map.put(\"id\", k.getId().toString());"},{"type":"INSERT","lineNumber":94,"content":"                    map.put(\"name\", k.getName());"},{"type":"INSERT","lineNumber":95,"content":"                    map.put(\"status\", k.getStatus());"},{"type":"INSERT","lineNumber":96,"content":"                    map.put(\"rateLimit\", k.getRateLimit());"},{"type":"INSERT","lineNumber":97,"content":"                    map.put(\"expiryDate\", k.getExpiryDate() != null ? k.getExpiryDate().toString() : null);"},{"type":"INSERT","lineNumber":98,"content":"                    return map;"},{"type":"INSERT","lineNumber":99,"content":"                });"}]},{"timestamp":1758550561699,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package com.sprout.AKMS.controller;","oldContent":"package com.akms.controller;"},{"type":"DELETE","lineNumber":39,"oldContent":""},{"type":"DELETE","lineNumber":41,"oldContent":"    // Generate API key"},{"type":"DELETE","lineNumber":45,"oldContent":"        CustomerEntity customer = customerRepository.findById(UUID.fromString(request.getCustomerId()))"},{"type":"INSERT","lineNumber":44,"content":"    // Generate API key"},{"type":"DELETE","lineNumber":48,"oldContent":"        String rawKey = UUID.randomUUID().toString().replace(\"-\", \"\");"},{"type":"INSERT","lineNumber":47,"content":"        CustomerEntity customer = customerRepository.findById(UUID.fromString(request.getCustomerId()))"},{"type":"DELETE","lineNumber":51,"oldContent":"        ApiKeyEntity apiKey = ApiKeyEntity.builder()"},{"type":"INSERT","lineNumber":49,"content":""},{"type":"INSERT","lineNumber":50,"content":"        String rawKey = UUID.randomUUID().toString().replace(\"-\", \"\");"},{"type":"INSERT","lineNumber":53,"content":"        ApiKeyEntity apiKey = ApiKeyEntity.builder()"},{"type":"DELETE","lineNumber":68,"oldContent":""},{"type":"DELETE","lineNumber":73,"oldContent":"        ApiKeyEntity key = apiKeyRepository.findById(id)"},{"type":"INSERT","lineNumber":72,"content":""},{"type":"INSERT","lineNumber":76,"content":"        ApiKeyEntity key = apiKeyRepository.findById(id)"},{"type":"DELETE","lineNumber":78,"oldContent":"    }"},{"type":"DELETE","lineNumber":80,"oldContent":""},{"type":"DELETE","lineNumber":83,"oldContent":"    @GetMapping(\"/customers/{id}/keys\")"},{"type":"DELETE","lineNumber":85,"oldContent":"        CustomerEntity customer = customerRepository.findById(id)"},{"type":"INSERT","lineNumber":82,"content":"    }"},{"type":"INSERT","lineNumber":83,"content":""},{"type":"INSERT","lineNumber":85,"content":"    @GetMapping(\"/customers/{id}/keys\")"},{"type":"INSERT","lineNumber":87,"content":"        CustomerEntity customer = customerRepository.findById(id)"},{"type":"INSERT","lineNumber":88,"content":"                .orElseThrow(() -> new RuntimeException(\"Customer not found\"));"},{"type":"INSERT","lineNumber":89,"content":"        return apiKeyRepository.findAll().stream()"},{"type":"INSERT","lineNumber":90,"content":"                .filter(k -> k.getCustomer().getId().equals(customer.getId()))"},{"type":"DELETE","lineNumber":90,"oldContent":"                .orElseThrow(() -> new RuntimeException(\"Customer not found\"));"},{"type":"DELETE","lineNumber":92,"oldContent":"        return apiKeyRepository.findAll().stream()"},{"type":"DELETE","lineNumber":94,"oldContent":"                .filter(k -> k.getCustomer().getId().equals(customer.getId()))"},{"type":"MODIFY","lineNumber":99,"content":"                })","oldContent":"                });"},{"type":"INSERT","lineNumber":100,"content":"                .toList();"}]},{"timestamp":1758552869905,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"DELETE","lineNumber":7,"oldContent":"import com.sprout.AKMS.core.entity.ApiKeyEntity;"},{"type":"DELETE","lineNumber":8,"oldContent":"import com.sprout.AKMS.core.entity.CustomerEntity;"},{"type":"DELETE","lineNumber":9,"oldContent":"import com.akms.entity.ApiKey;"},{"type":"DELETE","lineNumber":10,"oldContent":"import com.sprout.AKMS.repository.CustomerRepository;"},{"type":"DELETE","lineNumber":11,"oldContent":"import org.springframework.security.crypto.bcrypt.BCrypt;"},{"type":"INSERT","lineNumber":6,"content":"import com.sprout.AKMS.service.ApiKeyService;"},{"type":"INSERT","lineNumber":7,"content":"import io.swagger.v3.oas.annotations.Operation;"},{"type":"INSERT","lineNumber":8,"content":"import io.swagger.v3.oas.annotations.Parameter;"},{"type":"INSERT","lineNumber":9,"content":"import io.swagger.v3.oas.annotations.responses.ApiResponse;"},{"type":"INSERT","lineNumber":10,"content":"import io.swagger.v3.oas.annotations.responses.ApiResponses;"},{"type":"INSERT","lineNumber":11,"content":"import io.swagger.v3.oas.annotations.tags.Tag;"},{"type":"INSERT","lineNumber":12,"content":"import jakarta.validation.Valid;"},{"type":"INSERT","lineNumber":13,"content":"import lombok.RequiredArgsConstructor;"},{"type":"INSERT","lineNumber":14,"content":"import lombok.extern.slf4j.Slf4j;"},{"type":"INSERT","lineNumber":15,"content":"import org.springframework.data.domain.Page;"},{"type":"INSERT","lineNumber":16,"content":"import org.springframework.data.domain.PageRequest;"},{"type":"INSERT","lineNumber":17,"content":"import org.springframework.data.domain.Pageable;"},{"type":"INSERT","lineNumber":18,"content":"import org.springframework.data.domain.Sort;"},{"type":"INSERT","lineNumber":19,"content":"import org.springframework.http.HttpStatus;"},{"type":"INSERT","lineNumber":20,"content":"import org.springframework.http.ResponseEntity;"},{"type":"DELETE","lineNumber":14,"oldContent":"import java.util.*;"},{"type":"INSERT","lineNumber":23,"content":"import java.util.List;"},{"type":"INSERT","lineNumber":24,"content":"import java.util.Map;"},{"type":"INSERT","lineNumber":25,"content":"import java.util.UUID;"},{"type":"DELETE","lineNumber":17,"oldContent":"@RequestMapping(\"/akms\")"},{"type":"INSERT","lineNumber":28,"content":"@RequestMapping(\"/api/keys\")"},{"type":"INSERT","lineNumber":30,"content":"@Slf4j"},{"type":"INSERT","lineNumber":31,"content":"@Tag(name = \"API Key Management\", description = \"APIs for managing API keys\")"},{"type":"DELETE","lineNumber":21,"oldContent":"    private final ApiKeyRepository apiKeyRepository;"},{"type":"DELETE","lineNumber":22,"oldContent":"    private final CustomerRepository customerRepository;"},{"type":"INSERT","lineNumber":34,"content":"    private final ApiKeyService apiKeyService;"},{"type":"DELETE","lineNumber":24,"oldContent":"    // Validate API key"},{"type":"INSERT","lineNumber":36,"content":"    @PostMapping(\"/generate\")"},{"type":"INSERT","lineNumber":37,"content":"    @Operation(summary = \"Generate new API key\", description = \"Generates a new API key for a customer\")"},{"type":"INSERT","lineNumber":38,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":39,"content":"            @ApiResponse(responseCode = \"201\", description = \"API key generated successfully\"),"},{"type":"INSERT","lineNumber":40,"content":"            @ApiResponse(responseCode = \"400\", description = \"Invalid input data\"),"},{"type":"INSERT","lineNumber":41,"content":"            @ApiResponse(responseCode = \"404\", description = \"Customer not found\")"},{"type":"INSERT","lineNumber":42,"content":"    })"},{"type":"INSERT","lineNumber":43,"content":"    public ResponseEntity<Map<String, Object>> generateApiKey(@Valid @RequestBody GenerateKeyRequest request) {"},{"type":"INSERT","lineNumber":44,"content":"        log.info(\"Request to generate API key for customer: {}\", request.getCustomerId());"},{"type":"INSERT","lineNumber":45,"content":"        try {"},{"type":"INSERT","lineNumber":46,"content":"            Map<String, Object> response = apiKeyService.generateApiKey(request);"},{"type":"INSERT","lineNumber":47,"content":"            return new ResponseEntity<>(response, HttpStatus.CREATED);"},{"type":"INSERT","lineNumber":48,"content":"        } catch (RuntimeException e) {"},{"type":"INSERT","lineNumber":49,"content":"            log.error(\"Error generating API key: {}\", e.getMessage());"},{"type":"INSERT","lineNumber":50,"content":"            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();"},{"type":"INSERT","lineNumber":51,"content":"        }"},{"type":"INSERT","lineNumber":52,"content":"    }"},{"type":"INSERT","lineNumber":53,"content":""},{"type":"DELETE","lineNumber":26,"oldContent":"    public ValidateKeyResponse validateKey(@RequestBody ValidateKeyRequest request) {"},{"type":"DELETE","lineNumber":27,"oldContent":"        return apiKeyRepository.findAll().stream()"},{"type":"DELETE","lineNumber":28,"oldContent":"                .filter(key -> BCrypt.checkpw(request.getApiKey(), key.getApiKeyHash()))"},{"type":"DELETE","lineNumber":29,"oldContent":"                .findFirst()"},{"type":"DELETE","lineNumber":30,"oldContent":"                .map(key -> ValidateKeyResponse.builder()"},{"type":"DELETE","lineNumber":31,"oldContent":"                        .valid(true)"},{"type":"DELETE","lineNumber":32,"oldContent":"                        .customerId(key.getCustomer().getId().toString())"},{"type":"DELETE","lineNumber":33,"oldContent":"                        .permissions(Arrays.asList(key.getPermissions().split(\",\")))"},{"type":"DELETE","lineNumber":34,"oldContent":"                        .rateLimit(key.getRateLimit())"},{"type":"DELETE","lineNumber":35,"oldContent":"                        .expiryDate(key.getExpiryDate())"},{"type":"DELETE","lineNumber":36,"oldContent":"                        .build())"},{"type":"DELETE","lineNumber":37,"oldContent":"                .orElse(ValidateKeyResponse.builder()"},{"type":"DELETE","lineNumber":38,"oldContent":"                        .valid(false)"},{"type":"DELETE","lineNumber":39,"oldContent":"                        .reason(\"Invalid or expired key\")"},{"type":"DELETE","lineNumber":40,"oldContent":"                        .build());"},{"type":"INSERT","lineNumber":55,"content":"    @Operation(summary = \"Validate API key\", description = \"Validates an API key and returns associated information\")"},{"type":"INSERT","lineNumber":56,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":57,"content":"            @ApiResponse(responseCode = \"200\", description = \"Validation completed\"),"},{"type":"INSERT","lineNumber":58,"content":"            @ApiResponse(responseCode = \"400\", description = \"Invalid request\")"},{"type":"INSERT","lineNumber":59,"content":"    })"},{"type":"INSERT","lineNumber":60,"content":"    public ResponseEntity<ValidateKeyResponse> validateApiKey(@Valid @RequestBody ValidateKeyRequest request) {"},{"type":"INSERT","lineNumber":61,"content":"        log.info(\"Request to validate API key\");"},{"type":"INSERT","lineNumber":62,"content":"        ValidateKeyResponse response = apiKeyService.validateApiKey(request);"},{"type":"INSERT","lineNumber":63,"content":"        return ResponseEntity.ok(response);"},{"type":"DELETE","lineNumber":42,"oldContent":"    // Generate API key"},{"type":"INSERT","lineNumber":66,"content":"    @PostMapping(\"/{id}/revoke\")"},{"type":"INSERT","lineNumber":67,"content":"    @Operation(summary = \"Revoke API key\", description = \"Revokes an API key by setting its status to revoked\")"},{"type":"INSERT","lineNumber":68,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":69,"content":"            @ApiResponse(responseCode = \"200\", description = \"API key revoked successfully\"),"},{"type":"INSERT","lineNumber":70,"content":"            @ApiResponse(responseCode = \"404\", description = \"API key not found\")"},{"type":"INSERT","lineNumber":71,"content":"    })"},{"type":"INSERT","lineNumber":72,"content":"    public ResponseEntity<ApiKey> revokeApiKey("},{"type":"INSERT","lineNumber":73,"content":"            @Parameter(description = \"API key ID\") @PathVariable UUID id) {"},{"type":"INSERT","lineNumber":74,"content":"        log.info(\"Request to revoke API key: {}\", id);"},{"type":"INSERT","lineNumber":75,"content":"        try {"},{"type":"INSERT","lineNumber":76,"content":"            ApiKey revokedKey = apiKeyService.revokeApiKey(id);"},{"type":"INSERT","lineNumber":77,"content":"            return ResponseEntity.ok(revokedKey);"},{"type":"INSERT","lineNumber":78,"content":"        } catch (RuntimeException e) {"},{"type":"INSERT","lineNumber":79,"content":"            log.error(\"Error revoking API key: {}\", e.getMessage());"},{"type":"INSERT","lineNumber":80,"content":"            return ResponseEntity.notFound().build();"},{"type":"INSERT","lineNumber":81,"content":"        }"},{"type":"INSERT","lineNumber":82,"content":"    }"},{"type":"DELETE","lineNumber":45,"oldContent":"        CustomerEntity customer = customerRepository.findById(UUID.fromString(request.getCustomerId()))"},{"type":"DELETE","lineNumber":46,"oldContent":"    public Map<String, Object> generateKey(@RequestBody GenerateKeyRequest request) {"},{"type":"INSERT","lineNumber":84,"content":"    @PostMapping(\"/{id}/activate\")"},{"type":"INSERT","lineNumber":85,"content":"    @Operation(summary = \"Activate API key\", description = \"Activates a revoked API key\")"},{"type":"INSERT","lineNumber":86,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":87,"content":"            @ApiResponse(responseCode = \"200\", description = \"API key activated successfully\"),"},{"type":"INSERT","lineNumber":88,"content":"            @ApiResponse(responseCode = \"404\", description = \"API key not found\"),"},{"type":"INSERT","lineNumber":89,"content":"            @ApiResponse(responseCode = \"400\", description = \"Cannot activate expired key\")"},{"type":"INSERT","lineNumber":90,"content":"    })"},{"type":"INSERT","lineNumber":91,"content":"    public ResponseEntity<ApiKey> activateApiKey("},{"type":"INSERT","lineNumber":92,"content":"            @Parameter(description = \"API key ID\") @PathVariable UUID id) {"},{"type":"INSERT","lineNumber":93,"content":"        log.info(\"Request to activate API key: {}\", id);"},{"type":"INSERT","lineNumber":94,"content":"        try {"},{"type":"INSERT","lineNumber":95,"content":"            ApiKey activatedKey = apiKeyService.activateApiKey(id);"},{"type":"INSERT","lineNumber":96,"content":"            return ResponseEntity.ok(activatedKey);"},{"type":"INSERT","lineNumber":97,"content":"        } catch (RuntimeException e) {"},{"type":"INSERT","lineNumber":98,"content":"            log.error(\"Error activating API key: {}\", e.getMessage());"},{"type":"INSERT","lineNumber":99,"content":"            if (e.getMessage().contains(\"not found\")) {"},{"type":"INSERT","lineNumber":100,"content":"                return ResponseEntity.notFound().build();"},{"type":"INSERT","lineNumber":101,"content":"            }"},{"type":"INSERT","lineNumber":102,"content":"            return ResponseEntity.badRequest().build();"},{"type":"INSERT","lineNumber":103,"content":"        }"},{"type":"INSERT","lineNumber":104,"content":"    }"},{"type":"DELETE","lineNumber":48,"oldContent":"        Customer customer = customerRepository.findById(UUID.fromString(request.getCustomerId()))"},{"type":"DELETE","lineNumber":49,"oldContent":"        String rawKey = UUID.randomUUID().toString().replace(\"-\", \"\");"},{"type":"INSERT","lineNumber":106,"content":"    @GetMapping(\"/{id}\")"},{"type":"INSERT","lineNumber":107,"content":"    @Operation(summary = \"Get API key by ID\", description = \"Retrieves an API key by its ID\")"},{"type":"INSERT","lineNumber":108,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":109,"content":"            @ApiResponse(responseCode = \"200\", description = \"API key found\"),"},{"type":"INSERT","lineNumber":110,"content":"            @ApiResponse(responseCode = \"404\", description = \"API key not found\")"},{"type":"INSERT","lineNumber":111,"content":"    })"},{"type":"INSERT","lineNumber":112,"content":"    public ResponseEntity<ApiKey> getApiKeyById("},{"type":"INSERT","lineNumber":113,"content":"            @Parameter(description = \"API key ID\") @PathVariable UUID id) {"},{"type":"INSERT","lineNumber":114,"content":"        log.info(\"Request to get API key by ID: {}\", id);"},{"type":"INSERT","lineNumber":115,"content":"        return apiKeyService.getApiKeyById(id)"},{"type":"INSERT","lineNumber":116,"content":"                .map(apiKey -> ResponseEntity.ok(apiKey))"},{"type":"INSERT","lineNumber":117,"content":"                .orElse(ResponseEntity.notFound().build());"},{"type":"INSERT","lineNumber":118,"content":"    }"},{"type":"INSERT","lineNumber":120,"content":"    @GetMapping"},{"type":"INSERT","lineNumber":121,"content":"    @Operation(summary = \"Get all API keys\", description = \"Retrieves all API keys with optional pagination\")"},{"type":"INSERT","lineNumber":122,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":123,"content":"            @ApiResponse(responseCode = \"200\", description = \"API keys retrieved successfully\")"},{"type":"INSERT","lineNumber":124,"content":"    })"},{"type":"INSERT","lineNumber":125,"content":"    public ResponseEntity<?> getAllApiKeys("},{"type":"INSERT","lineNumber":126,"content":"            @Parameter(description = \"Page number (0-based)\") @RequestParam(defaultValue = \"0\") int page,"},{"type":"INSERT","lineNumber":127,"content":"            @Parameter(description = \"Page size\") @RequestParam(defaultValue = \"10\") int size,"},{"type":"INSERT","lineNumber":128,"content":"            @Parameter(description = \"Sort by field\") @RequestParam(defaultValue = \"createdAt\") String sortBy,"},{"type":"INSERT","lineNumber":129,"content":"            @Parameter(description = \"Sort direction\") @RequestParam(defaultValue = \"desc\") String sortDir,"},{"type":"INSERT","lineNumber":130,"content":"            @Parameter(description = \"Enable pagination\") @RequestParam(defaultValue = \"true\") boolean paginated) {"},{"type":"DELETE","lineNumber":52,"oldContent":"        ApiKeyEntity apiKey = ApiKeyEntity.builder()"},{"type":"DELETE","lineNumber":53,"oldContent":"        ApiKey apiKey = ApiKey.builder()"},{"type":"DELETE","lineNumber":54,"oldContent":"                .apiKeyHash(hashedKey)"},{"type":"DELETE","lineNumber":55,"oldContent":"                .name(request.getName())"},{"type":"DELETE","lineNumber":56,"oldContent":"                .permissions(String.join(\",\", request.getPermissions()))"},{"type":"DELETE","lineNumber":57,"oldContent":"                .rateLimit(request.getRateLimit())"},{"type":"DELETE","lineNumber":58,"oldContent":"                .expiryDate(request.getExpiryDate())"},{"type":"DELETE","lineNumber":59,"oldContent":"                .status(\"active\")"},{"type":"DELETE","lineNumber":60,"oldContent":"                .build();"},{"type":"INSERT","lineNumber":132,"content":"        log.info(\"Request to get all API keys - page: {}, size: {}, sortBy: {}, sortDir: {}, paginated: {}\","},{"type":"INSERT","lineNumber":133,"content":"                page, size, sortBy, sortDir, paginated);"},{"type":"DELETE","lineNumber":62,"oldContent":"        apiKeyRepository.save(apiKey);"},{"type":"INSERT","lineNumber":135,"content":"        if (!paginated) {"},{"type":"INSERT","lineNumber":136,"content":"            List<ApiKey> apiKeys = apiKeyService.getAllApiKeys();"},{"type":"INSERT","lineNumber":137,"content":"            return ResponseEntity.ok(apiKeys);"},{"type":"INSERT","lineNumber":138,"content":"        }"},{"type":"DELETE","lineNumber":64,"oldContent":"        Map<String, Object> response = new HashMap<>();"},{"type":"DELETE","lineNumber":65,"oldContent":"        response.put(\"apiKey\", rawKey); // raw shown once"},{"type":"DELETE","lineNumber":66,"oldContent":"        response.put(\"customerId\", customer.getId().toString());"},{"type":"DELETE","lineNumber":67,"oldContent":"        response.put(\"status\", \"active\");"},{"type":"INSERT","lineNumber":140,"content":"        Sort sort = sortDir.equalsIgnoreCase(\"desc\") ?"},{"type":"INSERT","lineNumber":141,"content":"                Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();"},{"type":"INSERT","lineNumber":142,"content":"        Pageable pageable = PageRequest.of(page, size, sort);"},{"type":"INSERT","lineNumber":143,"content":"        Page<ApiKey> apiKeys = apiKeyService.getAllApiKeys(pageable);"},{"type":"DELETE","lineNumber":69,"oldContent":"        return response;"},{"type":"INSERT","lineNumber":145,"content":"        return ResponseEntity.ok(apiKeys);"},{"type":"INSERT","lineNumber":148,"content":"    @GetMapping(\"/customer/{customerId}\")"},{"type":"INSERT","lineNumber":149,"content":"    @Operation(summary = \"Get API keys by customer\", description = \"Retrieves all API keys for a specific customer\")"},{"type":"INSERT","lineNumber":150,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":151,"content":"            @ApiResponse(responseCode = \"200\", description = \"API keys retrieved successfully\"),"},{"type":"INSERT","lineNumber":152,"content":"            @ApiResponse(responseCode = \"404\", description = \"Customer not found\")"},{"type":"INSERT","lineNumber":153,"content":"    })"},{"type":"INSERT","lineNumber":154,"content":"    public ResponseEntity<?> getApiKeysByCustomer("},{"type":"INSERT","lineNumber":155,"content":"            @Parameter(description = \"Customer ID\") @PathVariable UUID customerId,"},{"type":"INSERT","lineNumber":156,"content":"            @Parameter(description = \"Page number (0-based)\") @RequestParam(defaultValue = \"0\") int page,"},{"type":"INSERT","lineNumber":157,"content":"            @Parameter(description = \"Page size\") @RequestParam(defaultValue = \"10\") int size,"},{"type":"INSERT","lineNumber":158,"content":"            @Parameter(description = \"Sort by field\") @RequestParam(defaultValue = \"createdAt\") String sortBy,"},{"type":"INSERT","lineNumber":159,"content":"            @Parameter(description = \"Sort direction\") @RequestParam(defaultValue = \"desc\") String sortDir,"},{"type":"INSERT","lineNumber":160,"content":"            @Parameter(description = \"Enable pagination\") @RequestParam(defaultValue = \"true\") boolean paginated) {"},{"type":"DELETE","lineNumber":73,"oldContent":"    @PostMapping(\"/keys/{id}/revoke\")"},{"type":"DELETE","lineNumber":74,"oldContent":"    public Map<String, String> revokeKey(@PathVariable UUID id) {"},{"type":"DELETE","lineNumber":75,"oldContent":"        ApiKeyEntity key = apiKeyRepository.findById(id)"},{"type":"DELETE","lineNumber":76,"oldContent":"        ApiKey key = apiKeyRepository.findById(id)"},{"type":"DELETE","lineNumber":77,"oldContent":"        key.setStatus(\"revoked\");"},{"type":"DELETE","lineNumber":78,"oldContent":"        apiKeyRepository.save(key);"},{"type":"INSERT","lineNumber":162,"content":"        log.info(\"Request to get API keys for customer: {}\", customerId);"},{"type":"INSERT","lineNumber":164,"content":"        try {"},{"type":"INSERT","lineNumber":165,"content":"            if (!paginated) {"},{"type":"INSERT","lineNumber":166,"content":"                List<ApiKey> apiKeys = apiKeyService.getApiKeysByCustomerId(customerId);"},{"type":"INSERT","lineNumber":167,"content":"                return ResponseEntity.ok(apiKeys);"},{"type":"INSERT","lineNumber":168,"content":"            }"},{"type":"INSERT","lineNumber":169,"content":""},{"type":"INSERT","lineNumber":170,"content":"            Sort sort = sortDir.equalsIgnoreCase(\"desc\") ?"},{"type":"INSERT","lineNumber":171,"content":"                    Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();"},{"type":"INSERT","lineNumber":172,"content":"            Pageable pageable = PageRequest.of(page, size, sort);"},{"type":"INSERT","lineNumber":173,"content":"            Page<ApiKey> apiKeys = apiKeyService.getApiKeysByCustomerId(customerId, pageable);"},{"type":"INSERT","lineNumber":174,"content":""},{"type":"INSERT","lineNumber":175,"content":"            return ResponseEntity.ok(apiKeys);"},{"type":"INSERT","lineNumber":176,"content":"        } catch (RuntimeException e) {"},{"type":"INSERT","lineNumber":177,"content":"            log.error(\"Error fetching API keys for customer: {}\", e.getMessage());"},{"type":"INSERT","lineNumber":178,"content":"            return ResponseEntity.notFound().build();"},{"type":"INSERT","lineNumber":179,"content":"        }"},{"type":"DELETE","lineNumber":81,"oldContent":"        return Map.of(\"status\", \"revoked\", \"message\", \"API key revoked successfully\");"},{"type":"INSERT","lineNumber":182,"content":"    @GetMapping(\"/status/{status}\")"},{"type":"INSERT","lineNumber":183,"content":"    @Operation(summary = \"Get API keys by status\", description = \"Retrieves all API keys with a specific status\")"},{"type":"INSERT","lineNumber":184,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":185,"content":"            @ApiResponse(responseCode = \"200\", description = \"API keys retrieved successfully\")"},{"type":"INSERT","lineNumber":186,"content":"    })"},{"type":"INSERT","lineNumber":187,"content":"    public ResponseEntity<List<ApiKey>> getApiKeysByStatus("},{"type":"INSERT","lineNumber":188,"content":"            @Parameter(description = \"API key status\") @PathVariable String status) {"},{"type":"INSERT","lineNumber":189,"content":"        log.info(\"Request to get API keys with status: {}\", status);"},{"type":"INSERT","lineNumber":190,"content":"        List<ApiKey> apiKeys = apiKeyService.getApiKeysByStatus(status);"},{"type":"INSERT","lineNumber":191,"content":"        return ResponseEntity.ok(apiKeys);"},{"type":"DELETE","lineNumber":84,"oldContent":"    @GetMapping(\"/customers/{id}/keys\")"},{"type":"DELETE","lineNumber":85,"oldContent":"    @GetMapping(\"/customers/{id}/keys\")"},{"type":"DELETE","lineNumber":86,"oldContent":"        CustomerEntity customer = customerRepository.findById(id)"},{"type":"DELETE","lineNumber":87,"oldContent":"        Customer customer = customerRepository.findById(id)"},{"type":"DELETE","lineNumber":88,"oldContent":"                .orElseThrow(() -> new RuntimeException(\"Customer not found\"));"},{"type":"DELETE","lineNumber":89,"oldContent":"                .map(k -> {"},{"type":"DELETE","lineNumber":90,"oldContent":"        return apiKeyRepository.findAll().stream()"},{"type":"DELETE","lineNumber":91,"oldContent":"                    Map<String, Object> map = new HashMap<>();"},{"type":"DELETE","lineNumber":92,"oldContent":"                .filter(k -> k.getCustomer().getId().equals(customer.getId()))"},{"type":"DELETE","lineNumber":93,"oldContent":"                    map.put(\"id\", k.getId().toString());"},{"type":"DELETE","lineNumber":94,"oldContent":"                    map.put(\"name\", k.getName());"},{"type":"DELETE","lineNumber":95,"oldContent":"                    map.put(\"status\", k.getStatus());"},{"type":"DELETE","lineNumber":96,"oldContent":"                    map.put(\"rateLimit\", k.getRateLimit());"},{"type":"DELETE","lineNumber":97,"oldContent":"                    map.put(\"expiryDate\", k.getExpiryDate() != null ? k.getExpiryDate().toString() : null);"},{"type":"DELETE","lineNumber":98,"oldContent":"                    return map;"},{"type":"DELETE","lineNumber":99,"oldContent":"                })"},{"type":"DELETE","lineNumber":100,"oldContent":"                .toList();"},{"type":"DELETE","lineNumber":101,"oldContent":"}"},{"type":"INSERT","lineNumber":194,"content":"    @PutMapping(\"/{id}\")"},{"type":"INSERT","lineNumber":195,"content":"    @Operation(summary = \"Update API key\", description = \"Updates an existing API key\")"},{"type":"INSERT","lineNumber":196,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":197,"content":"            @ApiResponse(responseCode = \"200\", description = \"API key updated successfully\"),"},{"type":"INSERT","lineNumber":198,"content":"            @ApiResponse(responseCode = \"400\", description = \"Invalid input data\"),"},{"type":"INSERT","lineNumber":199,"content":"            @ApiResponse(responseCode = \"404\", description = \"API key not found\")"},{"type":"INSERT","lineNumber":200,"content":"    })"},{"type":"INSERT","lineNumber":201,"content":"    public ResponseEntity<ApiKey> updateApiKey("},{"type":"INSERT","lineNumber":202,"content":"            @Parameter(description = \"API key ID\") @PathVariable UUID id,"},{"type":"INSERT","lineNumber":203,"content":"            @Valid @RequestBody ApiKey apiKey) {"},{"type":"INSERT","lineNumber":204,"content":"        log.info(\"Request to update API key: {}\", id);"},{"type":"INSERT","lineNumber":205,"content":"        try {"},{"type":"INSERT","lineNumber":206,"content":"            ApiKey updatedApiKey = apiKeyService.updateApiKey(id, apiKey);"},{"type":"INSERT","lineNumber":207,"content":"            return ResponseEntity.ok(updatedApiKey);"},{"type":"INSERT","lineNumber":208,"content":"        } catch (RuntimeException e) {"},{"type":"INSERT","lineNumber":209,"content":"            log.error(\"Error updating API key: {}\", e.getMessage());"},{"type":"INSERT","lineNumber":210,"content":"            return ResponseEntity.notFound().build();"},{"type":"INSERT","lineNumber":211,"content":"        }"},{"type":"INSERT","lineNumber":212,"content":"    }"},{"type":"INSERT","lineNumber":213,"content":""},{"type":"INSERT","lineNumber":214,"content":"    @DeleteMapping(\"/{id}\")"},{"type":"INSERT","lineNumber":215,"content":"    @Operation(summary = \"Delete API key\", description = \"Permanently deletes an API key\")"},{"type":"INSERT","lineNumber":216,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":217,"content":"            @ApiResponse(responseCode = \"204\", description = \"API key deleted successfully\"),"},{"type":"INSERT","lineNumber":218,"content":"            @ApiResponse(responseCode = \"404\", description = \"API key not found\")"},{"type":"INSERT","lineNumber":219,"content":"    })"},{"type":"INSERT","lineNumber":220,"content":"    public ResponseEntity<Void> deleteApiKey("},{"type":"INSERT","lineNumber":221,"content":"            @Parameter(description = \"API key ID\") @PathVariable UUID id) {"},{"type":"INSERT","lineNumber":222,"content":"        log.info(\"Request to delete API key: {}\", id);"},{"type":"INSERT","lineNumber":223,"content":"        try {"},{"type":"INSERT","lineNumber":224,"content":"            apiKeyService.deleteApiKey(id);"},{"type":"INSERT","lineNumber":225,"content":"            return ResponseEntity.noContent().build();"},{"type":"INSERT","lineNumber":226,"content":"        } catch (RuntimeException e) {"},{"type":"INSERT","lineNumber":227,"content":"            log.error(\"Error deleting API key: {}\", e.getMessage());"},{"type":"INSERT","lineNumber":228,"content":"            return ResponseEntity.notFound().build();"},{"type":"INSERT","lineNumber":229,"content":"        }"},{"type":"INSERT","lineNumber":230,"content":"    }"},{"type":"INSERT","lineNumber":231,"content":""},{"type":"INSERT","lineNumber":232,"content":"    @GetMapping(\"/expired\")"},{"type":"INSERT","lineNumber":233,"content":"    @Operation(summary = \"Get expired API keys\", description = \"Retrieves all expired API keys\")"},{"type":"INSERT","lineNumber":234,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":235,"content":"            @ApiResponse(responseCode = \"200\", description = \"Expired API keys retrieved successfully\")"},{"type":"INSERT","lineNumber":236,"content":"    })"},{"type":"INSERT","lineNumber":237,"content":"    public ResponseEntity<List<ApiKey>> getExpiredKeys() {"},{"type":"INSERT","lineNumber":238,"content":"        log.info(\"Request to get expired API keys\");"},{"type":"INSERT","lineNumber":239,"content":"        List<ApiKey> expiredKeys = apiKeyService.getExpiredKeys();"},{"type":"INSERT","lineNumber":240,"content":"        return ResponseEntity.ok(expiredKeys);"},{"type":"INSERT","lineNumber":241,"content":"    }"},{"type":"INSERT","lineNumber":242,"content":""},{"type":"INSERT","lineNumber":243,"content":"    @PostMapping(\"/cleanup-expired\")"},{"type":"INSERT","lineNumber":244,"content":"    @Operation(summary = \"Cleanup expired keys\", description = \"Marks all expired API keys as expired status\")"},{"type":"INSERT","lineNumber":245,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":246,"content":"            @ApiResponse(responseCode = \"200\", description = \"Expired keys cleanup completed\")"},{"type":"INSERT","lineNumber":247,"content":"    })"},{"type":"INSERT","lineNumber":248,"content":"    public ResponseEntity<Map<String, String>> cleanupExpiredKeys() {"},{"type":"INSERT","lineNumber":249,"content":"        log.info(\"Request to cleanup expired API keys\");"},{"type":"INSERT","lineNumber":250,"content":"        apiKeyService.cleanupExpiredKeys();"},{"type":"INSERT","lineNumber":251,"content":"        return ResponseEntity.ok(Map.of(\"message\", \"Expired keys cleanup completed successfully\"));"},{"type":"INSERT","lineNumber":252,"content":"    }"},{"type":"INSERT","lineNumber":253,"content":""},{"type":"INSERT","lineNumber":254,"content":"    @GetMapping(\"/{rawKey}/validate-raw\")"},{"type":"INSERT","lineNumber":255,"content":"    @Operation(summary = \"Validate raw API key\", description = \"Validates a raw API key directly\")"},{"type":"INSERT","lineNumber":256,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":257,"content":"            @ApiResponse(responseCode = \"200\", description = \"Validation completed\")"},{"type":"INSERT","lineNumber":258,"content":"    })"},{"type":"INSERT","lineNumber":259,"content":"    public ResponseEntity<Map<String, Boolean>> validateRawApiKey("},{"type":"INSERT","lineNumber":260,"content":"            @Parameter(description = \"Raw API key\") @PathVariable String rawKey) {"},{"type":"INSERT","lineNumber":261,"content":"        log.info(\"Request to validate raw API key\");"},{"type":"INSERT","lineNumber":262,"content":"        boolean isValid = apiKeyService.isApiKeyValid(rawKey);"},{"type":"INSERT","lineNumber":263,"content":"        return ResponseEntity.ok(Map.of(\"valid\", isValid));"},{"type":"INSERT","lineNumber":264,"content":"    }"},{"type":"INSERT","lineNumber":265,"content":"}"}]},{"timestamp":1758555685883,"changes":[{"type":"MODIFY","lineNumber":6,"content":"import com.sprout.AKMS.service.ApiKeyService;","oldContent":"import com.sprout.AKMS.service.ApiKeyService;"},{"type":"DELETE","lineNumber":13,"oldContent":""},{"type":"DELETE","lineNumber":15,"oldContent":"import java.util.*;"},{"type":"DELETE","lineNumber":18,"oldContent":"@RestController"},{"type":"DELETE","lineNumber":20,"oldContent":"@RequestMapping(\"/akms\")"},{"type":"DELETE","lineNumber":23,"oldContent":"public class ApiKeyController {"},{"type":"DELETE","lineNumber":25,"oldContent":""},{"type":"DELETE","lineNumber":27,"oldContent":"    private final ApiKeyRepository apiKeyRepository;"},{"type":"INSERT","lineNumber":21,"content":"import org.springframework.web.bind.annotation.*;"},{"type":"INSERT","lineNumber":22,"content":""},{"type":"DELETE","lineNumber":29,"oldContent":"    // Validate API key"},{"type":"DELETE","lineNumber":32,"oldContent":"    public ValidateKeyResponse validateKey(@RequestBody ValidateKeyRequest request) {"},{"type":"INSERT","lineNumber":26,"content":""},{"type":"INSERT","lineNumber":27,"content":"@RestController"},{"type":"INSERT","lineNumber":29,"content":"@RequiredArgsConstructor"},{"type":"INSERT","lineNumber":32,"content":"public class ApiKeyController {"},{"type":"INSERT","lineNumber":33,"content":""},{"type":"INSERT","lineNumber":35,"content":""},{"type":"DELETE","lineNumber":43,"oldContent":""},{"type":"DELETE","lineNumber":46,"oldContent":"    // Generate API key"},{"type":"DELETE","lineNumber":48,"oldContent":""},{"type":"DELETE","lineNumber":52,"oldContent":""},{"type":"DELETE","lineNumber":56,"oldContent":"        String rawKey = UUID.randomUUID().toString().replace(\"-\", \"\");"},{"type":"DELETE","lineNumber":58,"oldContent":"        ApiKey apiKey = ApiKey.builder()"},{"type":"INSERT","lineNumber":54,"content":"    @PostMapping(\"/validate\")"},{"type":"DELETE","lineNumber":68,"oldContent":"        apiKeyRepository.save(apiKey);"},{"type":"DELETE","lineNumber":71,"oldContent":"        Map<String, Object> response = new HashMap<>();"},{"type":"INSERT","lineNumber":64,"content":"    }"},{"type":"INSERT","lineNumber":65,"content":""},{"type":"DELETE","lineNumber":75,"oldContent":"        return response;"},{"type":"DELETE","lineNumber":78,"oldContent":""},{"type":"DELETE","lineNumber":80,"oldContent":""},{"type":"DELETE","lineNumber":82,"oldContent":"    // Revoke API key"},{"type":"DELETE","lineNumber":90,"oldContent":"        return Map.of(\"status\", \"revoked\", \"message\", \"API key revoked successfully\");"},{"type":"DELETE","lineNumber":92,"oldContent":"    }"},{"type":"DELETE","lineNumber":96,"oldContent":""},{"type":"DELETE","lineNumber":116,"oldContent":"}"},{"type":"DELETE","lineNumber":119,"oldContent":"    }"},{"type":"DELETE","lineNumber":120,"oldContent":"        return ResponseEntity.ok(Map.of(\"valid\", isValid));"},{"type":"DELETE","lineNumber":121,"oldContent":"        boolean isValid = apiKeyService.isApiKeyValid(rawKey);"},{"type":"INSERT","lineNumber":105,"content":""},{"type":"DELETE","lineNumber":123,"oldContent":"        log.info(\"Request to validate raw API key\");"},{"type":"DELETE","lineNumber":125,"oldContent":"            @Parameter(description = \"Raw API key\") @PathVariable String rawKey) {"},{"type":"DELETE","lineNumber":127,"oldContent":"    public ResponseEntity<Map<String, Boolean>> validateRawApiKey("},{"type":"DELETE","lineNumber":129,"oldContent":"    })"},{"type":"DELETE","lineNumber":131,"oldContent":"            @ApiResponse(responseCode = \"200\", description = \"Validation completed\")"},{"type":"DELETE","lineNumber":133,"oldContent":"    @ApiResponses(value = {"},{"type":"DELETE","lineNumber":135,"oldContent":"    @Operation(summary = \"Validate raw API key\", description = \"Validates a raw API key directly\")"},{"type":"DELETE","lineNumber":137,"oldContent":"    @GetMapping(\"/{rawKey}/validate-raw\")"},{"type":"DELETE","lineNumber":139,"oldContent":""},{"type":"DELETE","lineNumber":141,"oldContent":"    }"},{"type":"DELETE","lineNumber":143,"oldContent":"        return ResponseEntity.ok(Map.of(\"message\", \"Expired keys cleanup completed successfully\"));"},{"type":"DELETE","lineNumber":145,"oldContent":"        apiKeyService.cleanupExpiredKeys();"},{"type":"DELETE","lineNumber":147,"oldContent":"        log.info(\"Request to cleanup expired API keys\");"},{"type":"DELETE","lineNumber":148,"oldContent":"    public ResponseEntity<Map<String, String>> cleanupExpiredKeys() {"},{"type":"INSERT","lineNumber":119,"content":""},{"type":"DELETE","lineNumber":150,"oldContent":"    })"},{"type":"DELETE","lineNumber":152,"oldContent":"            @ApiResponse(responseCode = \"200\", description = \"Expired keys cleanup completed\")"},{"type":"DELETE","lineNumber":154,"oldContent":"    @ApiResponses(value = {"},{"type":"DELETE","lineNumber":156,"oldContent":"    @Operation(summary = \"Cleanup expired keys\", description = \"Marks all expired API keys as expired status\")"},{"type":"DELETE","lineNumber":158,"oldContent":"    @PostMapping(\"/cleanup-expired\")"},{"type":"DELETE","lineNumber":160,"oldContent":""},{"type":"DELETE","lineNumber":162,"oldContent":"    }"},{"type":"DELETE","lineNumber":164,"oldContent":"        return ResponseEntity.ok(expiredKeys);"},{"type":"DELETE","lineNumber":166,"oldContent":"        List<ApiKey> expiredKeys = apiKeyService.getExpiredKeys();"},{"type":"DELETE","lineNumber":168,"oldContent":"        log.info(\"Request to get expired API keys\");"},{"type":"DELETE","lineNumber":170,"oldContent":"    public ResponseEntity<List<ApiKey>> getExpiredKeys() {"},{"type":"DELETE","lineNumber":171,"oldContent":"    })"},{"type":"INSERT","lineNumber":131,"content":""},{"type":"DELETE","lineNumber":173,"oldContent":"            @ApiResponse(responseCode = \"200\", description = \"Expired API keys retrieved successfully\")"},{"type":"DELETE","lineNumber":175,"oldContent":"    @ApiResponses(value = {"},{"type":"DELETE","lineNumber":176,"oldContent":"    @Operation(summary = \"Get expired API keys\", description = \"Retrieves all expired API keys\")"},{"type":"INSERT","lineNumber":134,"content":""},{"type":"DELETE","lineNumber":178,"oldContent":"    @GetMapping(\"/expired\")"},{"type":"DELETE","lineNumber":180,"oldContent":""},{"type":"DELETE","lineNumber":182,"oldContent":"    }"},{"type":"DELETE","lineNumber":184,"oldContent":"        }"},{"type":"DELETE","lineNumber":185,"oldContent":"            return ResponseEntity.notFound().build();"},{"type":"INSERT","lineNumber":139,"content":""},{"type":"DELETE","lineNumber":187,"oldContent":"            log.error(\"Error deleting API key: {}\", e.getMessage());"},{"type":"DELETE","lineNumber":189,"oldContent":"        } catch (RuntimeException e) {"},{"type":"DELETE","lineNumber":191,"oldContent":"            return ResponseEntity.noContent().build();"},{"type":"DELETE","lineNumber":193,"oldContent":"            apiKeyService.deleteApiKey(id);"},{"type":"DELETE","lineNumber":194,"oldContent":"        try {"},{"type":"INSERT","lineNumber":144,"content":""},{"type":"DELETE","lineNumber":196,"oldContent":"        log.info(\"Request to delete API key: {}\", id);"},{"type":"DELETE","lineNumber":197,"oldContent":"            @Parameter(description = \"API key ID\") @PathVariable UUID id) {"},{"type":"DELETE","lineNumber":198,"oldContent":"    public ResponseEntity<Void> deleteApiKey("},{"type":"INSERT","lineNumber":146,"content":"    }"},{"type":"INSERT","lineNumber":147,"content":""},{"type":"DELETE","lineNumber":200,"oldContent":"    })"},{"type":"DELETE","lineNumber":202,"oldContent":"            @ApiResponse(responseCode = \"404\", description = \"API key not found\")"},{"type":"DELETE","lineNumber":204,"oldContent":"            @ApiResponse(responseCode = \"204\", description = \"API key deleted successfully\"),"},{"type":"DELETE","lineNumber":206,"oldContent":"    @ApiResponses(value = {"},{"type":"DELETE","lineNumber":208,"oldContent":"    @Operation(summary = \"Delete API key\", description = \"Permanently deletes an API key\")"},{"type":"DELETE","lineNumber":210,"oldContent":"    @DeleteMapping(\"/{id}\")"},{"type":"DELETE","lineNumber":212,"oldContent":""},{"type":"DELETE","lineNumber":214,"oldContent":"    }"},{"type":"DELETE","lineNumber":216,"oldContent":"        }"},{"type":"DELETE","lineNumber":218,"oldContent":"            return ResponseEntity.notFound().build();"},{"type":"DELETE","lineNumber":220,"oldContent":"            log.error(\"Error updating API key: {}\", e.getMessage());"},{"type":"DELETE","lineNumber":222,"oldContent":"        } catch (RuntimeException e) {"},{"type":"DELETE","lineNumber":224,"oldContent":"            return ResponseEntity.ok(updatedApiKey);"},{"type":"DELETE","lineNumber":225,"oldContent":"            ApiKey updatedApiKey = apiKeyService.updateApiKey(id, apiKey);"},{"type":"INSERT","lineNumber":161,"content":""},{"type":"INSERT","lineNumber":163,"content":""},{"type":"DELETE","lineNumber":228,"oldContent":"        log.info(\"Request to update API key: {}\", id);"},{"type":"DELETE","lineNumber":229,"oldContent":"        try {"},{"type":"DELETE","lineNumber":230,"oldContent":"            @Valid @RequestBody ApiKey apiKey) {"},{"type":"DELETE","lineNumber":232,"oldContent":"            @Parameter(description = \"API key ID\") @PathVariable UUID id,"},{"type":"DELETE","lineNumber":234,"oldContent":"    public ResponseEntity<ApiKey> updateApiKey("},{"type":"DELETE","lineNumber":236,"oldContent":"    })"},{"type":"DELETE","lineNumber":238,"oldContent":"            @ApiResponse(responseCode = \"404\", description = \"API key not found\")"},{"type":"DELETE","lineNumber":240,"oldContent":"            @ApiResponse(responseCode = \"400\", description = \"Invalid input data\"),"},{"type":"DELETE","lineNumber":242,"oldContent":"            @ApiResponse(responseCode = \"200\", description = \"API key updated successfully\"),"},{"type":"DELETE","lineNumber":244,"oldContent":"    @ApiResponses(value = {"},{"type":"DELETE","lineNumber":246,"oldContent":"    @Operation(summary = \"Update API key\", description = \"Updates an existing API key\")"},{"type":"DELETE","lineNumber":248,"oldContent":"    @PutMapping(\"/{id}\")"},{"type":"DELETE","lineNumber":250,"oldContent":"        return ResponseEntity.ok(apiKeys);"},{"type":"DELETE","lineNumber":252,"oldContent":"        List<ApiKey> apiKeys = apiKeyService.getApiKeysByStatus(status);"},{"type":"DELETE","lineNumber":254,"oldContent":"        log.info(\"Request to get API keys with status: {}\", status);"},{"type":"DELETE","lineNumber":256,"oldContent":"            @Parameter(description = \"API key status\") @PathVariable String status) {"},{"type":"INSERT","lineNumber":179,"content":"        }"},{"type":"INSERT","lineNumber":180,"content":"    }"},{"type":"INSERT","lineNumber":181,"content":""},{"type":"INSERT","lineNumber":182,"content":"    @GetMapping(\"/status/{status}\")"},{"type":"INSERT","lineNumber":183,"content":"    @Operation(summary = \"Get API keys by status\", description = \"Retrieves all API keys with a specific status\")"},{"type":"INSERT","lineNumber":184,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":185,"content":"            @ApiResponse(responseCode = \"200\", description = \"API keys retrieved successfully\")"},{"type":"INSERT","lineNumber":186,"content":"    })"},{"type":"INSERT","lineNumber":188,"content":"            @Parameter(description = \"API key status\") @PathVariable String status) {"},{"type":"INSERT","lineNumber":189,"content":"        log.info(\"Request to get API keys with status: {}\", status);"},{"type":"INSERT","lineNumber":190,"content":"        List<ApiKey> apiKeys = apiKeyService.getApiKeysByStatus(status);"},{"type":"INSERT","lineNumber":191,"content":"        return ResponseEntity.ok(apiKeys);"},{"type":"INSERT","lineNumber":192,"content":"    }"},{"type":"INSERT","lineNumber":193,"content":""},{"type":"INSERT","lineNumber":194,"content":"    @PutMapping(\"/{id}\")"},{"type":"INSERT","lineNumber":195,"content":"    @Operation(summary = \"Update API key\", description = \"Updates an existing API key\")"},{"type":"INSERT","lineNumber":196,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":197,"content":"            @ApiResponse(responseCode = \"200\", description = \"API key updated successfully\"),"},{"type":"INSERT","lineNumber":198,"content":"            @ApiResponse(responseCode = \"400\", description = \"Invalid input data\"),"},{"type":"INSERT","lineNumber":199,"content":"            @ApiResponse(responseCode = \"404\", description = \"API key not found\")"},{"type":"INSERT","lineNumber":200,"content":"    })"},{"type":"INSERT","lineNumber":201,"content":"    public ResponseEntity<ApiKey> updateApiKey("},{"type":"INSERT","lineNumber":202,"content":"            @Parameter(description = \"API key ID\") @PathVariable UUID id,"},{"type":"INSERT","lineNumber":203,"content":"            @Valid @RequestBody ApiKey apiKey) {"},{"type":"INSERT","lineNumber":204,"content":"        log.info(\"Request to update API key: {}\", id);"},{"type":"INSERT","lineNumber":205,"content":"        try {"},{"type":"INSERT","lineNumber":206,"content":"            ApiKey updatedApiKey = apiKeyService.updateApiKey(id, apiKey);"},{"type":"INSERT","lineNumber":207,"content":"            return ResponseEntity.ok(updatedApiKey);"},{"type":"INSERT","lineNumber":208,"content":"        } catch (RuntimeException e) {"},{"type":"INSERT","lineNumber":209,"content":"            log.error(\"Error updating API key: {}\", e.getMessage());"},{"type":"INSERT","lineNumber":210,"content":"            return ResponseEntity.notFound().build();"},{"type":"INSERT","lineNumber":212,"content":"    }"},{"type":"INSERT","lineNumber":213,"content":""},{"type":"INSERT","lineNumber":214,"content":"    @DeleteMapping(\"/{id}\")"},{"type":"INSERT","lineNumber":215,"content":"    @Operation(summary = \"Delete API key\", description = \"Permanently deletes an API key\")"},{"type":"INSERT","lineNumber":216,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":217,"content":"            @ApiResponse(responseCode = \"204\", description = \"API key deleted successfully\"),"},{"type":"INSERT","lineNumber":218,"content":"            @ApiResponse(responseCode = \"404\", description = \"API key not found\")"},{"type":"DELETE","lineNumber":261,"oldContent":"            @ApiResponse(responseCode = \"200\", description = \"API keys retrieved successfully\")"},{"type":"INSERT","lineNumber":220,"content":"    public ResponseEntity<Void> deleteApiKey("},{"type":"INSERT","lineNumber":221,"content":"            @Parameter(description = \"API key ID\") @PathVariable UUID id) {"},{"type":"INSERT","lineNumber":222,"content":"        log.info(\"Request to delete API key: {}\", id);"},{"type":"INSERT","lineNumber":223,"content":"        try {"},{"type":"INSERT","lineNumber":224,"content":"            apiKeyService.deleteApiKey(id);"},{"type":"INSERT","lineNumber":225,"content":"            return ResponseEntity.noContent().build();"},{"type":"INSERT","lineNumber":226,"content":"        } catch (RuntimeException e) {"},{"type":"INSERT","lineNumber":227,"content":"            log.error(\"Error deleting API key: {}\", e.getMessage());"},{"type":"INSERT","lineNumber":228,"content":"            return ResponseEntity.notFound().build();"},{"type":"INSERT","lineNumber":229,"content":"        }"},{"type":"INSERT","lineNumber":230,"content":"    }"},{"type":"INSERT","lineNumber":231,"content":""},{"type":"INSERT","lineNumber":232,"content":"    @GetMapping(\"/expired\")"},{"type":"INSERT","lineNumber":233,"content":"    @Operation(summary = \"Get expired API keys\", description = \"Retrieves all expired API keys\")"},{"type":"DELETE","lineNumber":263,"oldContent":"    @GetMapping(\"/status/{status}\")"},{"type":"DELETE","lineNumber":264,"oldContent":"    @Operation(summary = \"Get API keys by status\", description = \"Retrieves all API keys with a specific status\")"},{"type":"INSERT","lineNumber":235,"content":"            @ApiResponse(responseCode = \"200\", description = \"Expired API keys retrieved successfully\")"},{"type":"INSERT","lineNumber":236,"content":"    })"},{"type":"INSERT","lineNumber":237,"content":"    public ResponseEntity<List<ApiKey>> getExpiredKeys() {"},{"type":"INSERT","lineNumber":238,"content":"        log.info(\"Request to get expired API keys\");"},{"type":"INSERT","lineNumber":239,"content":"        List<ApiKey> expiredKeys = apiKeyService.getExpiredKeys();"},{"type":"INSERT","lineNumber":240,"content":"        return ResponseEntity.ok(expiredKeys);"},{"type":"INSERT","lineNumber":241,"content":"    }"},{"type":"INSERT","lineNumber":242,"content":""},{"type":"INSERT","lineNumber":243,"content":"    @PostMapping(\"/cleanup-expired\")"},{"type":"INSERT","lineNumber":244,"content":"    @Operation(summary = \"Cleanup expired keys\", description = \"Marks all expired API keys as expired status\")"},{"type":"INSERT","lineNumber":245,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":246,"content":"            @ApiResponse(responseCode = \"200\", description = \"Expired keys cleanup completed\")"},{"type":"INSERT","lineNumber":247,"content":"    })"},{"type":"INSERT","lineNumber":248,"content":"    public ResponseEntity<Map<String, String>> cleanupExpiredKeys() {"},{"type":"INSERT","lineNumber":249,"content":"        log.info(\"Request to cleanup expired API keys\");"},{"type":"INSERT","lineNumber":250,"content":"        apiKeyService.cleanupExpiredKeys();"},{"type":"INSERT","lineNumber":251,"content":"        return ResponseEntity.ok(Map.of(\"message\", \"Expired keys cleanup completed successfully\"));"},{"type":"INSERT","lineNumber":252,"content":"    }"},{"type":"INSERT","lineNumber":253,"content":""},{"type":"INSERT","lineNumber":254,"content":"    @GetMapping(\"/{rawKey}/validate-raw\")"},{"type":"INSERT","lineNumber":255,"content":"    @Operation(summary = \"Validate raw API key\", description = \"Validates a raw API key directly\")"},{"type":"INSERT","lineNumber":256,"content":"    @ApiResponses(value = {"},{"type":"INSERT","lineNumber":257,"content":"            @ApiResponse(responseCode = \"200\", description = \"Validation completed\")"},{"type":"INSERT","lineNumber":258,"content":"    })"},{"type":"INSERT","lineNumber":259,"content":"    public ResponseEntity<Map<String, Boolean>> validateRawApiKey("},{"type":"INSERT","lineNumber":260,"content":"            @Parameter(description = \"Raw API key\") @PathVariable String rawKey) {"},{"type":"INSERT","lineNumber":261,"content":"        log.info(\"Request to validate raw API key\");"},{"type":"INSERT","lineNumber":262,"content":"        boolean isValid = apiKeyService.isApiKeyValid(rawKey);"},{"type":"INSERT","lineNumber":263,"content":"        return ResponseEntity.ok(Map.of(\"valid\", isValid));"},{"type":"INSERT","lineNumber":264,"content":"    }"},{"type":"INSERT","lineNumber":265,"content":"}"}]}]},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/core/dto/GenerateKeyRequests.java":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/core/dto/GenerateKeyRequests.java","baseContent":"package com.akms.dto;\n\nimport lombok.Data;\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@Data\npublic class GenerateKeyRequest {\n    private String customerId;\n    private String name;\n    private List<String> permissions;\n    private Integer rateLimit;\n    private LocalDateTime expiryDate;\n}\n","baseTimestamp":1758549935961,"deltas":[{"timestamp":1758549960317,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package com.sprout.AKMS.core.dto;","oldContent":"package com.akms.dto;"}]}]},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/core/dto/ValidKeyRequest.java":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/core/dto/ValidKeyRequest.java","baseContent":"package com.akms.dto;\n\nimport lombok.Data;\n\n@Data\npublic class ValidateKeyRequest {\n    private String apiKey;\n}\n","baseTimestamp":1758549977765,"deltas":[{"timestamp":1758549980837,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package com.sprout.AKMS.core.dto;","oldContent":"package com.akms.dto;"}]}]},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/core/dto/ValidateKeyResponse.java":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/core/dto/ValidateKeyResponse.java","baseContent":"package com.akms.dto;\n\nimport lombok.Builder;\nimport lombok.Data;\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@Data\n@Builder\npublic class ValidateKeyResponse {\n    private boolean valid;\n    private String customerId;\n    private List<String> permissions;\n    private Integer rateLimit;\n    private LocalDateTime expiryDate;\n    private String reason;\n}\n","baseTimestamp":1758550008740,"deltas":[{"timestamp":1758550012656,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package com.sprout.AKMS.core.dto;","oldContent":"package com.akms.dto;"}]}]},"/terminal_output":{"filePath":"/terminal_output","baseContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ ","baseTimestamp":1758550032863,"deltas":[{"timestamp":1758550041039,"changes":[{"type":"MODIFY","lineNumber":0,"content":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ docker-compose up -d","oldContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ "},{"type":"INSERT","lineNumber":1,"content":"Creating network \"akms_default\" with the default driver"},{"type":"INSERT","lineNumber":2,"content":"Creating volume \"akms_postgres_data\" with default driver"},{"type":"INSERT","lineNumber":3,"content":"Pulling postgres (postgres:16)..."},{"type":"INSERT","lineNumber":4,"content":""}]},{"timestamp":1758550064872,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":""},{"type":"INSERT","lineNumber":4,"content":"16: Pulling from library/postgres"},{"type":"INSERT","lineNumber":5,"content":"ce1261c6d567: Pull complete"},{"type":"INSERT","lineNumber":6,"content":"80ed16669c95: Pull complete"},{"type":"INSERT","lineNumber":7,"content":"5f436a09eefc: Pull complete"},{"type":"INSERT","lineNumber":8,"content":"e98bbd76c099: Pull complete"},{"type":"INSERT","lineNumber":9,"content":"1014f5c99171: Pull complete"},{"type":"INSERT","lineNumber":10,"content":"0cfcf4ec2c02: Pull complete"},{"type":"INSERT","lineNumber":11,"content":"cb4494753109: Pull complete"},{"type":"INSERT","lineNumber":12,"content":"9286f415f93a: Pull complete"},{"type":"INSERT","lineNumber":13,"content":"e6c4a2127465: Pull complete"},{"type":"INSERT","lineNumber":14,"content":"68ac989ed9cb: Pull complete"},{"type":"INSERT","lineNumber":15,"content":"f082d788df98: Pull complete"},{"type":"INSERT","lineNumber":16,"content":"32274acbaad0: Pull complete"},{"type":"INSERT","lineNumber":17,"content":"1aa01e357d22: Pull complete"},{"type":"INSERT","lineNumber":18,"content":"a82c537fceb7: Pull complete"},{"type":"INSERT","lineNumber":19,"content":"Digest: sha256:b477759d38be47671d54a054d832791f8ddb9f0eaf6faf51ed17516087793a66"},{"type":"INSERT","lineNumber":20,"content":"Status: Downloaded newer image for postgres:16"},{"type":"INSERT","lineNumber":21,"content":"Creating sprouts-postgres ... "},{"type":"INSERT","lineNumber":22,"content":"Creating sprouts-postgres ... error"},{"type":"INSERT","lineNumber":23,"content":""},{"type":"INSERT","lineNumber":24,"content":"ERROR: for sprouts-postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (8286ef574e20e084e1af36686085f38adaf12eebfeb0abe39ec2e97de5062c3c): Bind for 0.0.0.0:5432 failed: port is already allocated"},{"type":"INSERT","lineNumber":25,"content":""},{"type":"INSERT","lineNumber":26,"content":"ERROR: for postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (8286ef574e20e084e1af36686085f38adaf12eebfeb0abe39ec2e97de5062c3c): Bind for 0.0.0.0:5432 failed: port is already allocated"},{"type":"INSERT","lineNumber":27,"content":"ERROR: Encountered errors while bringing up the project."},{"type":"INSERT","lineNumber":28,"content":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ "}]},{"timestamp":1758550088971,"changes":[{"type":"MODIFY","lineNumber":4,"content":"16: Pulling from library/postgres","oldContent":"16: Pulling from library/postgres"},{"type":"DELETE","lineNumber":6,"oldContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ "},{"type":"DELETE","lineNumber":8,"oldContent":"ERROR: Encountered errors while bringing up the project."},{"type":"DELETE","lineNumber":10,"oldContent":"ERROR: for postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (8286ef574e20e084e1af36686085f38adaf12eebfeb0abe39ec2e97de5062c3c): Bind for 0.0.0.0:5432 failed: port is already allocated"},{"type":"DELETE","lineNumber":12,"oldContent":""},{"type":"DELETE","lineNumber":14,"oldContent":"ERROR: for sprouts-postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (8286ef574e20e084e1af36686085f38adaf12eebfeb0abe39ec2e97de5062c3c): Bind for 0.0.0.0:5432 failed: port is already allocated"},{"type":"DELETE","lineNumber":16,"oldContent":""},{"type":"DELETE","lineNumber":18,"oldContent":"Creating sprouts-postgres ... error"},{"type":"DELETE","lineNumber":20,"oldContent":"Creating sprouts-postgres ... "},{"type":"DELETE","lineNumber":22,"oldContent":"Status: Downloaded newer image for postgres:16"},{"type":"DELETE","lineNumber":24,"oldContent":"Digest: sha256:b477759d38be47671d54a054d832791f8ddb9f0eaf6faf51ed17516087793a66"},{"type":"DELETE","lineNumber":26,"oldContent":"a82c537fceb7: Pull complete"},{"type":"INSERT","lineNumber":18,"content":"a82c537fceb7: Pull complete"},{"type":"INSERT","lineNumber":19,"content":"Digest: sha256:b477759d38be47671d54a054d832791f8ddb9f0eaf6faf51ed17516087793a66"},{"type":"INSERT","lineNumber":20,"content":"Status: Downloaded newer image for postgres:16"},{"type":"INSERT","lineNumber":21,"content":"Creating sprouts-postgres ... "},{"type":"INSERT","lineNumber":22,"content":"Creating sprouts-postgres ... error"},{"type":"INSERT","lineNumber":23,"content":""},{"type":"INSERT","lineNumber":24,"content":"ERROR: for sprouts-postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (8286ef574e20e084e1af36686085f38adaf12eebfeb0abe39ec2e97de5062c3c): Bind for 0.0.0.0:5432 failed: port is already allocated"},{"type":"INSERT","lineNumber":25,"content":""},{"type":"INSERT","lineNumber":26,"content":"ERROR: for postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (8286ef574e20e084e1af36686085f38adaf12eebfeb0abe39ec2e97de5062c3c): Bind for 0.0.0.0:5432 failed: port is already allocated"},{"type":"INSERT","lineNumber":27,"content":"ERROR: Encountered errors while bringing up the project."},{"type":"INSERT","lineNumber":28,"content":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ npx kill-port 5432"},{"type":"INSERT","lineNumber":29,"content":"Need to install the following packages:"},{"type":"INSERT","lineNumber":30,"content":"  kill-port@2.0.1"},{"type":"INSERT","lineNumber":31,"content":"Ok to proceed? (y) y"},{"type":"INSERT","lineNumber":32,"content":"Process on port 5432 killed"},{"type":"INSERT","lineNumber":33,"content":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ docker-compose up -d"},{"type":"INSERT","lineNumber":34,"content":"Starting sprouts-postgres ... "},{"type":"INSERT","lineNumber":35,"content":"Starting sprouts-postgres ... error"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":37,"content":"ERROR: for sprouts-postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (9b03e74c4db05d12225de22586a750658f9fa1db43ebd0595f1d91a658d1a757): Bind for 0.0.0.0:5432 failed: port is already allocated"},{"type":"INSERT","lineNumber":38,"content":""},{"type":"INSERT","lineNumber":39,"content":"ERROR: for postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (9b03e74c4db05d12225de22586a750658f9fa1db43ebd0595f1d91a658d1a757): Bind for 0.0.0.0:5432 failed: port is already allocated"},{"type":"INSERT","lineNumber":40,"content":"ERROR: Encountered errors while bringing up the project."},{"type":"INSERT","lineNumber":41,"content":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ "}]},{"timestamp":1758550109392,"changes":[{"type":"INSERT","lineNumber":3,"content":"Pulling postgres (postgres:16)..."},{"type":"DELETE","lineNumber":4,"oldContent":"16: Pulling from library/postgres"},{"type":"INSERT","lineNumber":12,"content":"9286f415f93a: Pull complete"},{"type":"INSERT","lineNumber":13,"content":"e6c4a2127465: Pull complete"},{"type":"INSERT","lineNumber":14,"content":"68ac989ed9cb: Pull complete"},{"type":"INSERT","lineNumber":15,"content":"f082d788df98: Pull complete"},{"type":"INSERT","lineNumber":16,"content":"32274acbaad0: Pull complete"},{"type":"INSERT","lineNumber":17,"content":"1aa01e357d22: Pull complete"},{"type":"DELETE","lineNumber":14,"oldContent":"9286f415f93a: Pull complete"},{"type":"DELETE","lineNumber":17,"oldContent":"e6c4a2127465: Pull complete"},{"type":"DELETE","lineNumber":20,"oldContent":"68ac989ed9cb: Pull complete"},{"type":"DELETE","lineNumber":23,"oldContent":"f082d788df98: Pull complete"},{"type":"DELETE","lineNumber":26,"oldContent":"32274acbaad0: Pull complete"},{"type":"DELETE","lineNumber":28,"oldContent":"1aa01e357d22: Pull complete"},{"type":"DELETE","lineNumber":30,"oldContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ "},{"type":"DELETE","lineNumber":32,"oldContent":"ERROR: Encountered errors while bringing up the project."},{"type":"DELETE","lineNumber":34,"oldContent":"ERROR: for postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (9b03e74c4db05d12225de22586a750658f9fa1db43ebd0595f1d91a658d1a757): Bind for 0.0.0.0:5432 failed: port is already allocated"},{"type":"DELETE","lineNumber":36,"oldContent":""},{"type":"DELETE","lineNumber":38,"oldContent":"ERROR: for sprouts-postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (9b03e74c4db05d12225de22586a750658f9fa1db43ebd0595f1d91a658d1a757): Bind for 0.0.0.0:5432 failed: port is already allocated"},{"type":"DELETE","lineNumber":40,"oldContent":""},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":37,"content":"ERROR: for sprouts-postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (9b03e74c4db05d12225de22586a750658f9fa1db43ebd0595f1d91a658d1a757): Bind for 0.0.0.0:5432 failed: port is already allocated"},{"type":"INSERT","lineNumber":38,"content":""},{"type":"INSERT","lineNumber":39,"content":"ERROR: for postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (9b03e74c4db05d12225de22586a750658f9fa1db43ebd0595f1d91a658d1a757): Bind for 0.0.0.0:5432 failed: port is already allocated"},{"type":"INSERT","lineNumber":40,"content":"ERROR: Encountered errors while bringing up the project."},{"type":"INSERT","lineNumber":41,"content":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ docker-compose up -d"},{"type":"INSERT","lineNumber":42,"content":"Recreating sprouts-postgres ... "},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"ERROR: for sprouts-postgres  'ContainerConfig'"},{"type":"INSERT","lineNumber":45,"content":""},{"type":"INSERT","lineNumber":46,"content":"ERROR: for postgres  'ContainerConfig'"},{"type":"INSERT","lineNumber":47,"content":"Traceback (most recent call last):"},{"type":"INSERT","lineNumber":48,"content":"  File \"docker-compose\", line 3, in <module>"},{"type":"INSERT","lineNumber":49,"content":"  File \"compose/cli/main.py\", line 81, in main"},{"type":"INSERT","lineNumber":50,"content":"  File \"compose/cli/main.py\", line 203, in perform_command"},{"type":"INSERT","lineNumber":51,"content":"  File \"compose/metrics/decorator.py\", line 18, in wrapper"},{"type":"INSERT","lineNumber":52,"content":"  File \"compose/cli/main.py\", line 1186, in up"},{"type":"INSERT","lineNumber":53,"content":"  File \"compose/cli/main.py\", line 1182, in up"},{"type":"INSERT","lineNumber":54,"content":"  File \"compose/project.py\", line 702, in up"},{"type":"INSERT","lineNumber":55,"content":"  File \"compose/parallel.py\", line 108, in parallel_execute"},{"type":"INSERT","lineNumber":56,"content":"  File \"compose/parallel.py\", line 206, in producer"},{"type":"INSERT","lineNumber":57,"content":"  File \"compose/project.py\", line 688, in do"},{"type":"INSERT","lineNumber":58,"content":"  File \"compose/service.py\", line 581, in execute_convergence_plan"},{"type":"INSERT","lineNumber":59,"content":"  File \"compose/service.py\", line 503, in _execute_convergence_recreate"},{"type":"INSERT","lineNumber":60,"content":"  File \"compose/parallel.py\", line 108, in parallel_execute"},{"type":"INSERT","lineNumber":61,"content":"  File \"compose/parallel.py\", line 206, in producer"},{"type":"INSERT","lineNumber":62,"content":"  File \"compose/service.py\", line 496, in recreate"},{"type":"INSERT","lineNumber":63,"content":"  File \"compose/service.py\", line 615, in recreate_container"},{"type":"INSERT","lineNumber":64,"content":"  File \"compose/service.py\", line 334, in create_container"},{"type":"INSERT","lineNumber":65,"content":"  File \"compose/service.py\", line 922, in _get_container_create_options"},{"type":"INSERT","lineNumber":66,"content":"  File \"compose/service.py\", line 962, in _build_container_volume_options"},{"type":"INSERT","lineNumber":67,"content":"  File \"compose/service.py\", line 1549, in merge_volume_bindings"},{"type":"INSERT","lineNumber":68,"content":"  File \"compose/service.py\", line 1579, in get_container_data_volumes"},{"type":"INSERT","lineNumber":69,"content":"KeyError: 'ContainerConfig'"},{"type":"INSERT","lineNumber":70,"content":"[53601] Failed to execute script docker-compose"},{"type":"INSERT","lineNumber":71,"content":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ "}]},{"timestamp":1758550123534,"changes":[{"type":"DELETE","lineNumber":13,"oldContent":"a82c537fceb7: Pull complete"},{"type":"DELETE","lineNumber":15,"oldContent":"Digest: sha256:b477759d38be47671d54a054d832791f8ddb9f0eaf6faf51ed17516087793a66"},{"type":"DELETE","lineNumber":18,"oldContent":"Status: Downloaded newer image for postgres:16"},{"type":"DELETE","lineNumber":20,"oldContent":"Creating sprouts-postgres ... "},{"type":"INSERT","lineNumber":18,"content":"a82c537fceb7: Pull complete"},{"type":"INSERT","lineNumber":19,"content":"Digest: sha256:b477759d38be47671d54a054d832791f8ddb9f0eaf6faf51ed17516087793a66"},{"type":"INSERT","lineNumber":20,"content":"Status: Downloaded newer image for postgres:16"},{"type":"INSERT","lineNumber":21,"content":"Creating sprouts-postgres ... "},{"type":"INSERT","lineNumber":33,"content":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ docker-compose up -d"},{"type":"INSERT","lineNumber":34,"content":"Starting sprouts-postgres ... "},{"type":"INSERT","lineNumber":35,"content":"Starting sprouts-postgres ... error"},{"type":"DELETE","lineNumber":35,"oldContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ docker-compose up -d"},{"type":"DELETE","lineNumber":38,"oldContent":"Starting sprouts-postgres ... "},{"type":"DELETE","lineNumber":41,"oldContent":"Starting sprouts-postgres ... error"},{"type":"DELETE","lineNumber":43,"oldContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ "},{"type":"DELETE","lineNumber":45,"oldContent":"[53601] Failed to execute script docker-compose"},{"type":"DELETE","lineNumber":47,"oldContent":"KeyError: 'ContainerConfig'"},{"type":"DELETE","lineNumber":49,"oldContent":"  File \"compose/service.py\", line 1579, in get_container_data_volumes"},{"type":"DELETE","lineNumber":51,"oldContent":"  File \"compose/service.py\", line 1549, in merge_volume_bindings"},{"type":"DELETE","lineNumber":53,"oldContent":"  File \"compose/service.py\", line 962, in _build_container_volume_options"},{"type":"DELETE","lineNumber":55,"oldContent":"  File \"compose/service.py\", line 922, in _get_container_create_options"},{"type":"DELETE","lineNumber":57,"oldContent":"  File \"compose/service.py\", line 334, in create_container"},{"type":"DELETE","lineNumber":59,"oldContent":"  File \"compose/service.py\", line 615, in recreate_container"},{"type":"DELETE","lineNumber":61,"oldContent":"  File \"compose/service.py\", line 496, in recreate"},{"type":"DELETE","lineNumber":63,"oldContent":"  File \"compose/parallel.py\", line 206, in producer"},{"type":"DELETE","lineNumber":65,"oldContent":"  File \"compose/parallel.py\", line 108, in parallel_execute"},{"type":"DELETE","lineNumber":67,"oldContent":"  File \"compose/service.py\", line 503, in _execute_convergence_recreate"},{"type":"DELETE","lineNumber":69,"oldContent":"  File \"compose/service.py\", line 581, in execute_convergence_plan"},{"type":"INSERT","lineNumber":58,"content":"  File \"compose/service.py\", line 581, in execute_convergence_plan"},{"type":"INSERT","lineNumber":59,"content":"  File \"compose/service.py\", line 503, in _execute_convergence_recreate"},{"type":"INSERT","lineNumber":60,"content":"  File \"compose/parallel.py\", line 108, in parallel_execute"},{"type":"INSERT","lineNumber":61,"content":"  File \"compose/parallel.py\", line 206, in producer"},{"type":"INSERT","lineNumber":62,"content":"  File \"compose/service.py\", line 496, in recreate"},{"type":"INSERT","lineNumber":63,"content":"  File \"compose/service.py\", line 615, in recreate_container"},{"type":"INSERT","lineNumber":64,"content":"  File \"compose/service.py\", line 334, in create_container"},{"type":"INSERT","lineNumber":65,"content":"  File \"compose/service.py\", line 922, in _get_container_create_options"},{"type":"INSERT","lineNumber":66,"content":"  File \"compose/service.py\", line 962, in _build_container_volume_options"},{"type":"INSERT","lineNumber":67,"content":"  File \"compose/service.py\", line 1549, in merge_volume_bindings"},{"type":"INSERT","lineNumber":68,"content":"  File \"compose/service.py\", line 1579, in get_container_data_volumes"},{"type":"INSERT","lineNumber":69,"content":"KeyError: 'ContainerConfig'"},{"type":"INSERT","lineNumber":70,"content":"[53601] Failed to execute script docker-compose"},{"type":"INSERT","lineNumber":71,"content":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ docker-compose "}]},{"timestamp":1758550133557,"changes":[{"type":"INSERT","lineNumber":16,"content":"32274acbaad0: Pull complete"},{"type":"INSERT","lineNumber":17,"content":"1aa01e357d22: Pull complete"},{"type":"DELETE","lineNumber":18,"oldContent":"32274acbaad0: Pull complete"},{"type":"DELETE","lineNumber":21,"oldContent":"1aa01e357d22: Pull complete"},{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"MODIFY","lineNumber":37,"content":"ERROR: for sprouts-postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (9b03e74c4db05d12225de22586a750658f9fa1db43ebd0595f1d91a658d1a757): Bind for 0.0.0.0:5432 failed: port is already allocated","oldContent":"ERROR: for sprouts-postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (9b03e74c4db05d12225de22586a750658f9fa1db43ebd0595f1d91a658d1a757): Bind for 0.0.0.0:5432 failed: port is already allocated"},{"type":"INSERT","lineNumber":38,"content":""},{"type":"MODIFY","lineNumber":51,"content":"  File \"compose/metrics/decorator.py\", line 18, in wrapper","oldContent":"  File \"compose/service.py\", line 581, in execute_convergence_plan"},{"type":"INSERT","lineNumber":52,"content":"  File \"compose/cli/main.py\", line 1186, in up"},{"type":"INSERT","lineNumber":53,"content":"  File \"compose/cli/main.py\", line 1182, in up"},{"type":"INSERT","lineNumber":54,"content":"  File \"compose/project.py\", line 702, in up"},{"type":"INSERT","lineNumber":55,"content":"  File \"compose/parallel.py\", line 108, in parallel_execute"},{"type":"INSERT","lineNumber":56,"content":"  File \"compose/parallel.py\", line 206, in producer"},{"type":"INSERT","lineNumber":57,"content":"  File \"compose/project.py\", line 688, in do"},{"type":"INSERT","lineNumber":58,"content":"  File \"compose/service.py\", line 581, in execute_convergence_plan"},{"type":"DELETE","lineNumber":54,"oldContent":"  File \"compose/metrics/decorator.py\", line 18, in wrapper"},{"type":"DELETE","lineNumber":57,"oldContent":"  File \"compose/cli/main.py\", line 1186, in up"},{"type":"DELETE","lineNumber":60,"oldContent":"  File \"compose/cli/main.py\", line 1182, in up"},{"type":"DELETE","lineNumber":63,"oldContent":"  File \"compose/project.py\", line 702, in up"},{"type":"DELETE","lineNumber":66,"oldContent":"  File \"compose/parallel.py\", line 108, in parallel_execute"},{"type":"DELETE","lineNumber":69,"oldContent":"  File \"compose/parallel.py\", line 206, in producer"},{"type":"DELETE","lineNumber":70,"oldContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ docker-compose "},{"type":"MODIFY","lineNumber":71,"content":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ docker-compose down -v","oldContent":"  File \"compose/project.py\", line 688, in do"},{"type":"INSERT","lineNumber":72,"content":"Removing b725cd096df8_sprouts-postgres ... done"},{"type":"INSERT","lineNumber":73,"content":"Removing network akms_default"},{"type":"INSERT","lineNumber":74,"content":"Removing volume akms_postgres_data"},{"type":"INSERT","lineNumber":75,"content":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ docker-compose up -d"},{"type":"INSERT","lineNumber":76,"content":"Creating network \"akms_default\" with the default driver"},{"type":"INSERT","lineNumber":77,"content":"Creating volume \"akms_postgres_data\" with default driver"},{"type":"INSERT","lineNumber":78,"content":"Creating sprouts-postgres ... "},{"type":"INSERT","lineNumber":79,"content":"Creating sprouts-postgres ... error"},{"type":"INSERT","lineNumber":80,"content":""},{"type":"INSERT","lineNumber":81,"content":"ERROR: for sprouts-postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (06d14ddebc16aa0c2ef8620e75147d2a546718bcec41d1d59cf23f1c48416cd3): failed to bind host port for 0.0.0.0:5433:172.19.0.2:5432/tcp: address already in use"},{"type":"INSERT","lineNumber":82,"content":""},{"type":"INSERT","lineNumber":83,"content":"ERROR: for postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (06d14ddebc16aa0c2ef8620e75147d2a546718bcec41d1d59cf23f1c48416cd3): failed to bind host port for 0.0.0.0:5433:172.19.0.2:5432/tcp: address already in use"},{"type":"INSERT","lineNumber":84,"content":"ERROR: Encountered errors while bringing up the project."},{"type":"INSERT","lineNumber":85,"content":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ "}]},{"timestamp":1758550209251,"changes":[{"type":"MODIFY","lineNumber":18,"content":"a82c537fceb7: Pull complete","oldContent":"a82c537fceb7: Pull complete"},{"type":"INSERT","lineNumber":35,"content":"Starting sprouts-postgres ... error"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"DELETE","lineNumber":36,"oldContent":"ERROR: for sprouts-postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (9b03e74c4db05d12225de22586a750658f9fa1db43ebd0595f1d91a658d1a757): Bind for 0.0.0.0:5432 failed: port is already allocated"},{"type":"DELETE","lineNumber":38,"oldContent":""},{"type":"MODIFY","lineNumber":50,"content":"  File \"compose/cli/main.py\", line 203, in perform_command","oldContent":"  File \"compose/service.py\", line 581, in execute_convergence_plan"},{"type":"DELETE","lineNumber":53,"oldContent":"  File \"compose/service.py\", line 503, in _execute_convergence_recreate"},{"type":"DELETE","lineNumber":55,"oldContent":"  File \"compose/parallel.py\", line 108, in parallel_execute"},{"type":"DELETE","lineNumber":59,"oldContent":"  File \"compose/parallel.py\", line 206, in producer"},{"type":"MODIFY","lineNumber":59,"content":"  File \"compose/service.py\", line 503, in _execute_convergence_recreate","oldContent":"  File \"compose/service.py\", line 496, in recreate"},{"type":"INSERT","lineNumber":60,"content":"  File \"compose/parallel.py\", line 108, in parallel_execute"},{"type":"INSERT","lineNumber":61,"content":"  File \"compose/parallel.py\", line 206, in producer"},{"type":"INSERT","lineNumber":62,"content":"  File \"compose/service.py\", line 496, in recreate"},{"type":"DELETE","lineNumber":73,"oldContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ "},{"type":"DELETE","lineNumber":75,"oldContent":"ERROR: Encountered errors while bringing up the project."},{"type":"DELETE","lineNumber":77,"oldContent":"ERROR: for postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (06d14ddebc16aa0c2ef8620e75147d2a546718bcec41d1d59cf23f1c48416cd3): failed to bind host port for 0.0.0.0:5433:172.19.0.2:5432/tcp: address already in use"},{"type":"DELETE","lineNumber":79,"oldContent":""},{"type":"DELETE","lineNumber":81,"oldContent":"ERROR: for sprouts-postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (06d14ddebc16aa0c2ef8620e75147d2a546718bcec41d1d59cf23f1c48416cd3): failed to bind host port for 0.0.0.0:5433:172.19.0.2:5432/tcp: address already in use"},{"type":"DELETE","lineNumber":83,"oldContent":""},{"type":"INSERT","lineNumber":80,"content":""},{"type":"INSERT","lineNumber":81,"content":"ERROR: for sprouts-postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (06d14ddebc16aa0c2ef8620e75147d2a546718bcec41d1d59cf23f1c48416cd3): failed to bind host port for 0.0.0.0:5433:172.19.0.2:5432/tcp: address already in use"},{"type":"INSERT","lineNumber":82,"content":""},{"type":"INSERT","lineNumber":83,"content":"ERROR: for postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (06d14ddebc16aa0c2ef8620e75147d2a546718bcec41d1d59cf23f1c48416cd3): failed to bind host port for 0.0.0.0:5433:172.19.0.2:5432/tcp: address already in use"},{"type":"INSERT","lineNumber":84,"content":"ERROR: Encountered errors while bringing up the project."},{"type":"INSERT","lineNumber":85,"content":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ docker-compose down -v"},{"type":"INSERT","lineNumber":86,"content":"Stopping sprouts-postgres ... done"},{"type":"INSERT","lineNumber":87,"content":"Removing sprouts-postgres ... done"},{"type":"INSERT","lineNumber":88,"content":"Removing network akms_default"},{"type":"INSERT","lineNumber":89,"content":"Removing volume akms_postgres_data"},{"type":"INSERT","lineNumber":90,"content":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ docker-compose up -d"},{"type":"INSERT","lineNumber":91,"content":"Creating network \"akms_default\" with the default driver"},{"type":"INSERT","lineNumber":92,"content":"Creating volume \"akms_postgres_data\" with default driver"},{"type":"INSERT","lineNumber":93,"content":"Creating sprouts-postgres ... done"},{"type":"INSERT","lineNumber":94,"content":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ "}]},{"timestamp":1758556852593,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ docker-compose up -d"},{"type":"DELETE","lineNumber":1,"oldContent":"Creating network \"akms_default\" with the default driver"},{"type":"DELETE","lineNumber":2,"oldContent":"Creating volume \"akms_postgres_data\" with default driver"},{"type":"DELETE","lineNumber":3,"oldContent":"Pulling postgres (postgres:16)..."},{"type":"DELETE","lineNumber":4,"oldContent":"16: Pulling from library/postgres"},{"type":"DELETE","lineNumber":5,"oldContent":"ce1261c6d567: Pull complete"},{"type":"DELETE","lineNumber":6,"oldContent":"80ed16669c95: Pull complete"},{"type":"DELETE","lineNumber":7,"oldContent":"5f436a09eefc: Pull complete"},{"type":"DELETE","lineNumber":8,"oldContent":"e98bbd76c099: Pull complete"},{"type":"DELETE","lineNumber":9,"oldContent":"1014f5c99171: Pull complete"},{"type":"DELETE","lineNumber":10,"oldContent":"0cfcf4ec2c02: Pull complete"},{"type":"DELETE","lineNumber":11,"oldContent":"cb4494753109: Pull complete"},{"type":"DELETE","lineNumber":12,"oldContent":"9286f415f93a: Pull complete"},{"type":"DELETE","lineNumber":13,"oldContent":"e6c4a2127465: Pull complete"},{"type":"DELETE","lineNumber":14,"oldContent":"68ac989ed9cb: Pull complete"},{"type":"DELETE","lineNumber":15,"oldContent":"f082d788df98: Pull complete"},{"type":"DELETE","lineNumber":16,"oldContent":"32274acbaad0: Pull complete"},{"type":"DELETE","lineNumber":17,"oldContent":"a82c537fceb7: Pull complete"},{"type":"DELETE","lineNumber":18,"oldContent":"a82c537fceb7: Pull complete"},{"type":"DELETE","lineNumber":19,"oldContent":"Digest: sha256:b477759d38be47671d54a054d832791f8ddb9f0eaf6faf51ed17516087793a66"},{"type":"DELETE","lineNumber":20,"oldContent":"Status: Downloaded newer image for postgres:16"},{"type":"DELETE","lineNumber":21,"oldContent":"Creating sprouts-postgres ... "},{"type":"DELETE","lineNumber":22,"oldContent":"Creating sprouts-postgres ... error"},{"type":"DELETE","lineNumber":23,"oldContent":""},{"type":"DELETE","lineNumber":24,"oldContent":"ERROR: for sprouts-postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (8286ef574e20e084e1af36686085f38adaf12eebfeb0abe39ec2e97de5062c3c): Bind for 0.0.0.0:5432 failed: port is already allocated"},{"type":"DELETE","lineNumber":25,"oldContent":""},{"type":"DELETE","lineNumber":26,"oldContent":"ERROR: for postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (8286ef574e20e084e1af36686085f38adaf12eebfeb0abe39ec2e97de5062c3c): Bind for 0.0.0.0:5432 failed: port is already allocated"},{"type":"DELETE","lineNumber":27,"oldContent":"ERROR: Encountered errors while bringing up the project."},{"type":"DELETE","lineNumber":28,"oldContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ npx kill-port 5432"},{"type":"DELETE","lineNumber":29,"oldContent":"Need to install the following packages:"},{"type":"DELETE","lineNumber":30,"oldContent":"  kill-port@2.0.1"},{"type":"DELETE","lineNumber":31,"oldContent":"Ok to proceed? (y) y"},{"type":"DELETE","lineNumber":32,"oldContent":"Process on port 5432 killed"},{"type":"DELETE","lineNumber":33,"oldContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ docker-compose up -d"},{"type":"DELETE","lineNumber":34,"oldContent":"Starting sprouts-postgres ... "},{"type":"DELETE","lineNumber":35,"oldContent":"Starting sprouts-postgres ... error"},{"type":"DELETE","lineNumber":36,"oldContent":"ERROR: for sprouts-postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (9b03e74c4db05d12225de22586a750658f9fa1db43ebd0595f1d91a658d1a757): Bind for 0.0.0.0:5432 failed: port is already allocated"},{"type":"DELETE","lineNumber":37,"oldContent":""},{"type":"DELETE","lineNumber":38,"oldContent":""},{"type":"DELETE","lineNumber":39,"oldContent":"ERROR: for postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (9b03e74c4db05d12225de22586a750658f9fa1db43ebd0595f1d91a658d1a757): Bind for 0.0.0.0:5432 failed: port is already allocated"},{"type":"DELETE","lineNumber":40,"oldContent":"ERROR: Encountered errors while bringing up the project."},{"type":"DELETE","lineNumber":41,"oldContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ docker-compose up -d"},{"type":"DELETE","lineNumber":42,"oldContent":"Recreating sprouts-postgres ... "},{"type":"DELETE","lineNumber":43,"oldContent":""},{"type":"DELETE","lineNumber":44,"oldContent":"ERROR: for sprouts-postgres  'ContainerConfig'"},{"type":"DELETE","lineNumber":45,"oldContent":""},{"type":"DELETE","lineNumber":46,"oldContent":"ERROR: for postgres  'ContainerConfig'"},{"type":"DELETE","lineNumber":47,"oldContent":"Traceback (most recent call last):"},{"type":"DELETE","lineNumber":48,"oldContent":"  File \"docker-compose\", line 3, in <module>"},{"type":"DELETE","lineNumber":49,"oldContent":"  File \"compose/cli/main.py\", line 81, in main"},{"type":"DELETE","lineNumber":50,"oldContent":"  File \"compose/cli/main.py\", line 203, in perform_command"},{"type":"DELETE","lineNumber":51,"oldContent":"  File \"compose/metrics/decorator.py\", line 18, in wrapper"},{"type":"DELETE","lineNumber":52,"oldContent":"  File \"compose/cli/main.py\", line 1186, in up"},{"type":"DELETE","lineNumber":53,"oldContent":"  File \"compose/cli/main.py\", line 1182, in up"},{"type":"DELETE","lineNumber":54,"oldContent":"  File \"compose/project.py\", line 702, in up"},{"type":"DELETE","lineNumber":55,"oldContent":"  File \"compose/parallel.py\", line 108, in parallel_execute"},{"type":"DELETE","lineNumber":56,"oldContent":"  File \"compose/parallel.py\", line 206, in producer"},{"type":"DELETE","lineNumber":57,"oldContent":"  File \"compose/service.py\", line 503, in _execute_convergence_recreate"},{"type":"DELETE","lineNumber":58,"oldContent":"  File \"compose/service.py\", line 496, in recreate"},{"type":"DELETE","lineNumber":59,"oldContent":"  File \"compose/parallel.py\", line 206, in producer"},{"type":"DELETE","lineNumber":60,"oldContent":"  File \"compose/project.py\", line 688, in do"},{"type":"DELETE","lineNumber":61,"oldContent":"  File \"compose/service.py\", line 496, in recreate"},{"type":"DELETE","lineNumber":62,"oldContent":"  File \"compose/service.py\", line 581, in execute_convergence_plan"},{"type":"DELETE","lineNumber":63,"oldContent":"  File \"compose/service.py\", line 615, in recreate_container"},{"type":"DELETE","lineNumber":64,"oldContent":"  File \"compose/service.py\", line 334, in create_container"},{"type":"DELETE","lineNumber":65,"oldContent":"  File \"compose/service.py\", line 922, in _get_container_create_options"},{"type":"DELETE","lineNumber":66,"oldContent":"  File \"compose/service.py\", line 962, in _build_container_volume_options"},{"type":"DELETE","lineNumber":67,"oldContent":"  File \"compose/service.py\", line 1549, in merge_volume_bindings"},{"type":"DELETE","lineNumber":68,"oldContent":"  File \"compose/service.py\", line 1579, in get_container_data_volumes"},{"type":"DELETE","lineNumber":69,"oldContent":"KeyError: 'ContainerConfig'"},{"type":"DELETE","lineNumber":70,"oldContent":"[53601] Failed to execute script docker-compose"},{"type":"DELETE","lineNumber":71,"oldContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ docker-compose down -v"},{"type":"DELETE","lineNumber":72,"oldContent":"Removing b725cd096df8_sprouts-postgres ... done"},{"type":"DELETE","lineNumber":73,"oldContent":"Removing network akms_default"},{"type":"DELETE","lineNumber":74,"oldContent":"Removing volume akms_postgres_data"},{"type":"DELETE","lineNumber":75,"oldContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ docker-compose up -d"},{"type":"DELETE","lineNumber":76,"oldContent":""},{"type":"DELETE","lineNumber":77,"oldContent":"Creating network \"akms_default\" with the default driver"},{"type":"DELETE","lineNumber":78,"oldContent":"ERROR: for sprouts-postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (06d14ddebc16aa0c2ef8620e75147d2a546718bcec41d1d59cf23f1c48416cd3): failed to bind host port for 0.0.0.0:5433:172.19.0.2:5432/tcp: address already in use"},{"type":"DELETE","lineNumber":79,"oldContent":""},{"type":"DELETE","lineNumber":80,"oldContent":"Creating volume \"akms_postgres_data\" with default driver"},{"type":"DELETE","lineNumber":81,"oldContent":"ERROR: for postgres  Cannot start service postgres: failed to set up container networking: driver failed programming external connectivity on endpoint sprouts-postgres (06d14ddebc16aa0c2ef8620e75147d2a546718bcec41d1d59cf23f1c48416cd3): failed to bind host port for 0.0.0.0:5433:172.19.0.2:5432/tcp: address already in use"},{"type":"DELETE","lineNumber":82,"oldContent":"ERROR: Encountered errors while bringing up the project."},{"type":"DELETE","lineNumber":83,"oldContent":"Creating sprouts-postgres ... "},{"type":"DELETE","lineNumber":84,"oldContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ docker-compose down -v"},{"type":"DELETE","lineNumber":85,"oldContent":"Creating sprouts-postgres ... error"},{"type":"DELETE","lineNumber":86,"oldContent":"Stopping sprouts-postgres ... done"},{"type":"DELETE","lineNumber":88,"oldContent":"Removing sprouts-postgres ... done"},{"type":"DELETE","lineNumber":89,"oldContent":"Creating sprouts-postgres ... done"},{"type":"DELETE","lineNumber":90,"oldContent":"Removing network akms_default"},{"type":"DELETE","lineNumber":91,"oldContent":"Creating volume \"akms_postgres_data\" with default driver"},{"type":"DELETE","lineNumber":92,"oldContent":"Removing volume akms_postgres_data"},{"type":"DELETE","lineNumber":93,"oldContent":"Creating network \"akms_default\" with the default driver"},{"type":"DELETE","lineNumber":94,"oldContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ docker-compose up -d"}]},{"timestamp":1758556866658,"changes":[{"type":"INSERT","lineNumber":0,"content":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ npm uninstall -g @anthropic-ai/claude-code"},{"type":"INSERT","lineNumber":1,"content":""},{"type":"INSERT","lineNumber":2,"content":"removed 3 packages in 234ms"}]},{"timestamp":1758556884397,"changes":[{"type":"MODIFY","lineNumber":0,"content":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ npm install -g @anthropic-ai/claude-code","oldContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ npm uninstall -g @anthropic-ai/claude-code"},{"type":"INSERT","lineNumber":1,"content":""},{"type":"INSERT","lineNumber":2,"content":"added 3 packages in 1s"},{"type":"INSERT","lineNumber":3,"content":""},{"type":"INSERT","lineNumber":4,"content":"2 packages are looking for funding"},{"type":"INSERT","lineNumber":5,"content":"  run `npm fund` for details"},{"type":"DELETE","lineNumber":3,"oldContent":"removed 3 packages in 234ms"},{"type":"INSERT","lineNumber":8,"content":""},{"type":"INSERT","lineNumber":9,"content":""},{"type":"INSERT","lineNumber":10,"content":""},{"type":"INSERT","lineNumber":11,"content":""},{"type":"INSERT","lineNumber":12,"content":""},{"type":"INSERT","lineNumber":13,"content":""},{"type":"INSERT","lineNumber":14,"content":""},{"type":"INSERT","lineNumber":15,"content":""},{"type":"INSERT","lineNumber":16,"content":""},{"type":"INSERT","lineNumber":17,"content":""},{"type":"INSERT","lineNumber":18,"content":""},{"type":"INSERT","lineNumber":19,"content":""},{"type":"INSERT","lineNumber":20,"content":""},{"type":"INSERT","lineNumber":21,"content":""},{"type":"INSERT","lineNumber":22,"content":""},{"type":"INSERT","lineNumber":23,"content":""},{"type":"INSERT","lineNumber":24,"content":""},{"type":"INSERT","lineNumber":25,"content":""},{"type":"INSERT","lineNumber":26,"content":""},{"type":"INSERT","lineNumber":27,"content":""},{"type":"INSERT","lineNumber":28,"content":""},{"type":"INSERT","lineNumber":29,"content":""},{"type":"INSERT","lineNumber":30,"content":""},{"type":"INSERT","lineNumber":31,"content":""},{"type":"INSERT","lineNumber":32,"content":""},{"type":"INSERT","lineNumber":33,"content":""},{"type":"INSERT","lineNumber":34,"content":""},{"type":"INSERT","lineNumber":35,"content":""},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":37,"content":""},{"type":"INSERT","lineNumber":38,"content":""},{"type":"INSERT","lineNumber":39,"content":""}]},{"timestamp":1758557039056,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ npm install -g @anthropic-ai/claude-code"},{"type":"DELETE","lineNumber":1,"oldContent":""},{"type":"DELETE","lineNumber":3,"oldContent":"added 3 packages in 1s"},{"type":"DELETE","lineNumber":4,"oldContent":""},{"type":"DELETE","lineNumber":5,"oldContent":""},{"type":"DELETE","lineNumber":6,"oldContent":"2 packages are looking for funding"},{"type":"DELETE","lineNumber":7,"oldContent":""},{"type":"DELETE","lineNumber":8,"oldContent":"  run `npm fund` for details"},{"type":"DELETE","lineNumber":9,"oldContent":""},{"type":"DELETE","lineNumber":10,"oldContent":""},{"type":"DELETE","lineNumber":11,"oldContent":""},{"type":"DELETE","lineNumber":12,"oldContent":""},{"type":"DELETE","lineNumber":13,"oldContent":""},{"type":"DELETE","lineNumber":14,"oldContent":""},{"type":"DELETE","lineNumber":15,"oldContent":""},{"type":"DELETE","lineNumber":16,"oldContent":""},{"type":"DELETE","lineNumber":17,"oldContent":""},{"type":"DELETE","lineNumber":18,"oldContent":""},{"type":"DELETE","lineNumber":19,"oldContent":""},{"type":"DELETE","lineNumber":20,"oldContent":""},{"type":"DELETE","lineNumber":21,"oldContent":""},{"type":"DELETE","lineNumber":22,"oldContent":""},{"type":"DELETE","lineNumber":23,"oldContent":""},{"type":"DELETE","lineNumber":24,"oldContent":""},{"type":"DELETE","lineNumber":25,"oldContent":""},{"type":"DELETE","lineNumber":26,"oldContent":""},{"type":"DELETE","lineNumber":27,"oldContent":""},{"type":"DELETE","lineNumber":28,"oldContent":""},{"type":"DELETE","lineNumber":29,"oldContent":""},{"type":"DELETE","lineNumber":30,"oldContent":""},{"type":"DELETE","lineNumber":31,"oldContent":""},{"type":"DELETE","lineNumber":32,"oldContent":""},{"type":"DELETE","lineNumber":33,"oldContent":""},{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"DELETE","lineNumber":35,"oldContent":""},{"type":"DELETE","lineNumber":36,"oldContent":""},{"type":"DELETE","lineNumber":37,"oldContent":""},{"type":"DELETE","lineNumber":38,"oldContent":""},{"type":"DELETE","lineNumber":39,"oldContent":""}]},{"timestamp":1758557044013,"changes":[{"type":"MODIFY","lineNumber":0,"content":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ npm uninstall -g @anthropic-ai/claude-code","oldContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ "}]},{"timestamp":1758557048502,"changes":[{"type":"INSERT","lineNumber":1,"content":""},{"type":"INSERT","lineNumber":2,"content":"removed 3 packages in 270ms"},{"type":"INSERT","lineNumber":3,"content":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ "}]},{"timestamp":1758607732645,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ npm uninstall -g @anthropic-ai/claude-code"},{"type":"DELETE","lineNumber":1,"oldContent":""},{"type":"DELETE","lineNumber":3,"oldContent":"removed 3 packages in 270ms"}]},{"timestamp":1758607741569,"changes":[{"type":"INSERT","lineNumber":0,"content":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS$ docker-compose up -d"},{"type":"INSERT","lineNumber":1,"content":"sprouts-postgres is up-to-date"}]}]},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/pom.xml":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/pom.xml","baseContent":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>3.5.6</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<groupId>com.sprout</groupId>\n\t<artifactId>AKMS</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>AKMS</name>\n\t<description>API Key Management service </description>\n\t<url/>\n\t<licenses>\n\t\t<license/>\n\t</licenses>\n\t<developers>\n\t\t<developer/>\n\t</developers>\n\t<scm>\n\t\t<connection/>\n\t\t<developerConnection/>\n\t\t<tag/>\n\t\t<url/>\n\t</scm>\n\t<properties>\n\t\t<java.version>21</java.version>\n\t</properties>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-actuator</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-security</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-validation</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n        <dependency>\n            <groupId>org.springdoc</groupId>\n            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>\n            <version>2.8.9</version>\n        </dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-devtools</artifactId>\n\t\t\t<scope>runtime</scope>\n\t\t\t<optional>true</optional>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.postgresql</groupId>\n\t\t\t<artifactId>postgresql</artifactId>\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.projectlombok</groupId>\n\t\t\t<artifactId>lombok</artifactId>\n\t\t\t<optional>true</optional>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.security</groupId>\n\t\t\t<artifactId>spring-security-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<annotationProcessorPaths>\n\t\t\t\t\t\t<path>\n\t\t\t\t\t\t\t<groupId>org.projectlombok</groupId>\n\t\t\t\t\t\t\t<artifactId>lombok</artifactId>\n\t\t\t\t\t\t</path>\n\t\t\t\t\t</annotationProcessorPaths>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<excludes>\n\t\t\t\t\t\t<exclude>\n\t\t\t\t\t\t\t<groupId>org.projectlombok</groupId>\n\t\t\t\t\t\t\t<artifactId>lombok</artifactId>\n\t\t\t\t\t\t</exclude>\n\t\t\t\t\t</excludes>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n","baseTimestamp":1758550636397,"deltas":[{"timestamp":1758553337103,"changes":[{"type":"INSERT","lineNumber":84,"content":"        <!-- Add Flyway dependency -->"},{"type":"INSERT","lineNumber":85,"content":"        <dependency>"},{"type":"INSERT","lineNumber":86,"content":"            <groupId>org.flywaydb</groupId>"},{"type":"INSERT","lineNumber":87,"content":"            <artifactId>flyway-core</artifactId>"},{"type":"INSERT","lineNumber":88,"content":"        </dependency>"},{"type":"INSERT","lineNumber":89,"content":""},{"type":"INSERT","lineNumber":90,"content":"        <!-- Add Flyway PostgreSQL dependency -->"},{"type":"INSERT","lineNumber":91,"content":"        <dependency>"},{"type":"INSERT","lineNumber":92,"content":"            <groupId>org.flywaydb</groupId>"},{"type":"INSERT","lineNumber":93,"content":"            <artifactId>flyway-database-postgresql</artifactId>"},{"type":"INSERT","lineNumber":94,"content":"        </dependency>"}]},{"timestamp":1758553506402,"changes":[{"type":"DELETE","lineNumber":84,"oldContent":"        <!-- Add Flyway dependency -->"},{"type":"DELETE","lineNumber":86,"oldContent":"        <dependency>"},{"type":"DELETE","lineNumber":88,"oldContent":"            <groupId>org.flywaydb</groupId>"},{"type":"DELETE","lineNumber":90,"oldContent":"            <artifactId>flyway-core</artifactId>"},{"type":"DELETE","lineNumber":92,"oldContent":"        </dependency>"},{"type":"DELETE","lineNumber":94,"oldContent":""},{"type":"DELETE","lineNumber":96,"oldContent":"        <!-- Add Flyway PostgreSQL dependency -->"},{"type":"DELETE","lineNumber":98,"oldContent":"        <dependency>"},{"type":"DELETE","lineNumber":100,"oldContent":"            <groupId>org.flywaydb</groupId>"},{"type":"DELETE","lineNumber":102,"oldContent":"            <artifactId>flyway-database-postgresql</artifactId>"},{"type":"DELETE","lineNumber":104,"oldContent":"        </dependency>"}]},{"timestamp":1758553512266,"changes":[{"type":"INSERT","lineNumber":57,"content":"        <!-- Add Flyway dependency -->"},{"type":"INSERT","lineNumber":58,"content":"        <dependency>"},{"type":"INSERT","lineNumber":59,"content":"            <groupId>org.flywaydb</groupId>"},{"type":"INSERT","lineNumber":60,"content":"            <artifactId>flyway-core</artifactId>"},{"type":"INSERT","lineNumber":61,"content":"        </dependency>"},{"type":"INSERT","lineNumber":63,"content":"        <!-- Add Flyway PostgreSQL dependency -->"},{"type":"INSERT","lineNumber":64,"content":"        <dependency>"},{"type":"INSERT","lineNumber":65,"content":"            <groupId>org.flywaydb</groupId>"},{"type":"INSERT","lineNumber":66,"content":"            <artifactId>flyway-database-postgresql</artifactId>"},{"type":"INSERT","lineNumber":67,"content":"        </dependency>"},{"type":"INSERT","lineNumber":68,"content":""}]}]},"/a.dummy":{"filePath":"/a.dummy","baseContent":"com.sprout.AKMS.service.serviceImpl","baseTimestamp":1758552167747,"deltas":[{"timestamp":1758553386764,"changes":[{"type":"MODIFY","lineNumber":0,"content":"db/migration","oldContent":"com.sprout.AKMS.service.serviceImpl"}]}]},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/service/serviceImpl/CustomerService.java":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/service/serviceImpl/CustomerService.java","baseContent":"package com.sprout.AKMS.service;\n\nimport com.sprout.AKMS.core.dto.Customer;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.UUID;\n\npublic interface CustomerService {\n    Customer createCustomer(Customer customer);\n    Optional<Customer> getCustomerById(UUID id);\n    Optional<Customer> getCustomerByEmail(String email);\n    List<Customer> getAllCustomers();\n    Page<Customer> getAllCustomers(Pageable pageable);\n    Customer updateCustomer(UUID id, Customer customer);\n    void deleteCustomer(UUID id);\n    boolean existsByEmail(String email);\n}","baseTimestamp":1758552201307},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/service/ApiKeyService.java":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/service/ApiKeyService.java","baseContent":"package com.sprout.AKMS.service;\n\nimport com.sprout.AKMS.core.dto.ApiKey;\nimport com.sprout.AKMS.core.dto.GenerateKeyRequest;\nimport com.sprout.AKMS.core.dto.ValidateKeyRequest;\nimport com.sprout.AKMS.core.dto.ValidateKeyResponse;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.UUID;\n\npublic interface ApiKeyService {\n    // Key generation and management\n    Map<String, Object> generateApiKey(GenerateKeyRequest request);\n    ValidateKeyResponse validateApiKey(ValidateKeyRequest request);\n    ApiKey revokeApiKey(UUID keyId);\n    ApiKey activateApiKey(UUID keyId);\n\n    // CRUD operations\n    Optional<ApiKey> getApiKeyById(UUID id);\n    List<ApiKey> getAllApiKeys();\n    Page<ApiKey> getAllApiKeys(Pageable pageable);\n    List<ApiKey> getApiKeysByCustomerId(UUID customerId);\n    Page<ApiKey> getApiKeysByCustomerId(UUID customerId, Pageable pageable);\n    List<ApiKey> getApiKeysByStatus(String status);\n\n    // Key management\n    ApiKey updateApiKey(UUID id, ApiKey apiKey);\n    void deleteApiKey(UUID id);\n\n    // Utility methods\n    boolean isApiKeyValid(String rawApiKey);\n    boolean isApiKeyExpired(UUID keyId);\n    List<ApiKey> getExpiredKeys();\n    void cleanupExpiredKeys();\n}","baseTimestamp":1758552603726},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/service/serviceImpl/ApiKeyServiceImpl.java":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/service/serviceImpl/ApiKeyServiceImpl.java","baseContent":"package com.sprout.AKMS.service.serviceImpl;\n\nimport com.sprout.AKMS.core.dto.ApiKey;\nimport com.sprout.AKMS.core.dto.GenerateKeyRequest;\nimport com.sprout.AKMS.core.dto.ValidateKeyRequest;\nimport com.sprout.AKMS.core.dto.ValidateKeyResponse;\nimport com.sprout.AKMS.core.entity.ApiKeyEntity;\nimport com.sprout.AKMS.core.entity.CustomerEntity;\nimport com.sprout.AKMS.repository.ApiKeyRepository;\nimport com.sprout.AKMS.repository.CustomerRepository;\nimport com.sprout.AKMS.service.ApiKeyService;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.security.crypto.bcrypt.BCrypt;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.time.LocalDateTime;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@Service\n@RequiredArgsConstructor\n@Slf4j\n@Transactional\npublic class ApiKeyServiceImpl implements ApiKeyService {\n\n    private final ApiKeyRepository apiKeyRepository;\n    private final CustomerRepository customerRepository;\n\n    @Override\n    public Map<String, Object> generateApiKey(GenerateKeyRequest request) {\n        log.info(\"Generating API key for customer: {}\", request.getCustomerId());\n\n        CustomerEntity customer = customerRepository.findById(UUID.fromString(request.getCustomerId()))\n                .orElseThrow(() -> new RuntimeException(\"Customer not found with ID: \" + request.getCustomerId()));\n\n        // Generate raw key and hash it\n        String rawKey = \"ak_\" + UUID.randomUUID().toString().replace(\"-\", \"\");\n        String hashedKey = BCrypt.hashpw(rawKey, BCrypt.gensalt());\n\n        ApiKeyEntity apiKeyEntity = ApiKeyEntity.builder()\n                .customer(customer)\n                .apiKeyHash(hashedKey)\n                .name(request.getName())\n                .permissions(String.join(\",\", request.getPermissions()))\n                .rateLimit(request.getRateLimit())\n                .expiryDate(request.getExpiryDate())\n                .status(\"active\")\n                .build();\n\n        ApiKeyEntity savedEntity = apiKeyRepository.save(apiKeyEntity);\n        log.info(\"API key generated successfully with ID: {}\", savedEntity.getId());\n\n        // Return response with raw key (shown only once)\n        Map<String, Object> response = new HashMap<>();\n        response.put(\"id\", savedEntity.getId().toString());\n        response.put(\"apiKey\", rawKey); // Raw key shown only once\n        response.put(\"customerId\", customer.getId().toString());\n        response.put(\"name\", savedEntity.getName());\n        response.put(\"status\", savedEntity.getStatus());\n        response.put(\"rateLimit\", savedEntity.getRateLimit());\n        response.put(\"expiryDate\", savedEntity.getExpiryDate());\n        response.put(\"createdAt\", savedEntity.getCreatedAt());\n\n        return response;\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public ValidateKeyResponse validateApiKey(ValidateKeyRequest request) {\n        log.info(\"Validating API key\");\n\n        return apiKeyRepository.findAll().stream()\n                .filter(key -> \"active\".equals(key.getStatus()))\n                .filter(key -> key.getExpiryDate() == null || key.getExpiryDate().isAfter(LocalDateTime.now()))\n                .filter(key -> BCrypt.checkpw(request.getApiKey(), key.getApiKeyHash()))\n                .findFirst()\n                .map(key -> {\n                    log.info(\"API key validation successful for customer: {}\", key.getCustomer().getId());\n                    return ValidateKeyResponse.builder()\n                            .valid(true)\n                            .customerId(key.getCustomer().getId().toString())\n                            .permissions(Arrays.asList(key.getPermissions().split(\",\")))\n                            .rateLimit(key.getRateLimit())\n                            .expiryDate(key.getExpiryDate())\n                            .build();\n                })\n                .orElse(ValidateKeyResponse.builder()\n                        .valid(false)\n                        .reason(\"Invalid, expired, or revoked API key\")\n                        .build());\n    }\n\n    @Override\n    public ApiKey revokeApiKey(UUID keyId) {\n        log.info(\"Revoking API key with ID: {}\", keyId);\n\n        ApiKeyEntity apiKeyEntity = apiKeyRepository.findById(keyId)\n                .orElseThrow(() -> new RuntimeException(\"API key not found with ID: \" + keyId));\n\n        apiKeyEntity.setStatus(\"revoked\");\n        apiKeyEntity.setUpdatedAt(LocalDateTime.now());\n\n        ApiKeyEntity savedEntity = apiKeyRepository.save(apiKeyEntity);\n        log.info(\"API key revoked successfully with ID: {}\", keyId);\n\n        return mapToDto(savedEntity);\n    }\n\n    @Override\n    public ApiKey activateApiKey(UUID keyId) {\n        log.info(\"Activating API key with ID: {}\", keyId);\n\n        ApiKeyEntity apiKeyEntity = apiKeyRepository.findById(keyId)\n                .orElseThrow(() -> new RuntimeException(\"API key not found with ID: \" + keyId));\n\n        // Check if key is not expired\n        if (apiKeyEntity.getExpiryDate() != null && apiKeyEntity.getExpiryDate().isBefore(LocalDateTime.now())) {\n            throw new RuntimeException(\"Cannot activate expired API key\");\n        }\n\n        apiKeyEntity.setStatus(\"active\");\n        apiKeyEntity.setUpdatedAt(LocalDateTime.now());\n\n        ApiKeyEntity savedEntity = apiKeyRepository.save(apiKeyEntity);\n        log.info(\"API key activated successfully with ID: {}\", keyId);\n\n        return mapToDto(savedEntity);\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public Optional<ApiKey> getApiKeyById(UUID id) {\n        log.info(\"Fetching API key by ID: {}\", id);\n        return apiKeyRepository.findById(id)\n                .map(this::mapToDto);\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public List<ApiKey> getAllApiKeys() {\n        log.info(\"Fetching all API keys\");\n        return apiKeyRepository.findAll().stream()\n                .map(this::mapToDto)\n                .collect(Collectors.toList());\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public Page<ApiKey> getAllApiKeys(Pageable pageable) {\n        log.info(\"Fetching API keys with pagination: page={}, size={}\",\n                pageable.getPageNumber(), pageable.getPageSize());\n        return apiKeyRepository.findAll(pageable)\n                .map(this::mapToDto);\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public List<ApiKey> getApiKeysByCustomerId(UUID customerId) {\n        log.info(\"Fetching API keys for customer: {}\", customerId);\n\n        CustomerEntity customer = customerRepository.findById(customerId)\n                .orElseThrow(() -> new RuntimeException(\"Customer not found with ID: \" + customerId));\n\n        return apiKeyRepository.findAll().stream()\n                .filter(key -> key.getCustomer().getId().equals(customerId))\n                .map(this::mapToDto)\n                .collect(Collectors.toList());\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public Page<ApiKey> getApiKeysByCustomerId(UUID customerId, Pageable pageable) {\n        log.info(\"Fetching API keys for customer: {} with pagination\", customerId);\n\n        if (!customerRepository.existsById(customerId)) {\n            throw new RuntimeException(\"Customer not found with ID: \" + customerId);\n        }\n\n        return apiKeyRepository.findAll(pageable)\n                .map(this::mapToDto);\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public List<ApiKey> getApiKeysByStatus(String status) {\n        log.info(\"Fetching API keys with status: {}\", status);\n        return apiKeyRepository.findAll().stream()\n                .filter(key -> status.equals(key.getStatus()))\n                .map(this::mapToDto)\n                .collect(Collectors.toList());\n    }\n\n    @Override\n    public ApiKey updateApiKey(UUID id, ApiKey apiKey) {\n        log.info(\"Updating API key with ID: {}\", id);\n\n        ApiKeyEntity existingEntity = apiKeyRepository.findById(id)\n                .orElseThrow(() -> new RuntimeException(\"API key not found with ID: \" + id));\n\n        // Update allowed fields (not the hash or customer)\n        existingEntity.setName(apiKey.getName());\n        existingEntity.setPermissions(String.join(\",\", apiKey.getPermissions()));\n        existingEntity.setRateLimit(apiKey.getRateLimit());\n        existingEntity.setExpiryDate(apiKey.getExpiryDate());\n        existingEntity.setUpdatedAt(LocalDateTime.now());\n\n        ApiKeyEntity updatedEntity = apiKeyRepository.save(existingEntity);\n        log.info(\"API key updated successfully with ID: {}\", id);\n\n        return mapToDto(updatedEntity);\n    }\n\n    @Override\n    public void deleteApiKey(UUID id) {\n        log.info(\"Deleting API key with ID: {}\", id);\n\n        if (!apiKeyRepository.existsById(id)) {\n            throw new RuntimeException(\"API key not found with ID: \" + id);\n        }\n\n        apiKeyRepository.deleteById(id);\n        log.info(\"API key deleted successfully with ID: {}\", id);\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public boolean isApiKeyValid(String rawApiKey) {\n        return apiKeyRepository.findAll().stream()\n                .anyMatch(key -> \"active\".equals(key.getStatus()) &&\n                        (key.getExpiryDate() == null || key.getExpiryDate().isAfter(LocalDateTime.now())) &&\n                        BCrypt.checkpw(rawApiKey, key.getApiKeyHash()));\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public boolean isApiKeyExpired(UUID keyId) {\n        return apiKeyRepository.findById(keyId)\n                .map(key -> key.getExpiryDate() != null && key.getExpiryDate().isBefore(LocalDateTime.now()))\n                .orElse(true);\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public List<ApiKey> getExpiredKeys() {\n        log.info(\"Fetching expired API keys\");\n        LocalDateTime now = LocalDateTime.now();\n        return apiKeyRepository.findAll().stream()\n                .filter(key -> key.getExpiryDate() != null && key.getExpiryDate().isBefore(now))\n                .map(this::mapToDto)\n                .collect(Collectors.toList());\n    }\n\n    @Override\n    public void cleanupExpiredKeys() {\n        log.info(\"Cleaning up expired API keys\");\n        LocalDateTime now = LocalDateTime.now();\n        List<ApiKeyEntity> expiredKeys = apiKeyRepository.findAll().stream()\n                .filter(key -> key.getExpiryDate() != null && key.getExpiryDate().isBefore(now))\n                .filter(key -> !\"expired\".equals(key.getStatus()))\n                .collect(Collectors.toList());\n\n        expiredKeys.forEach(key -> {\n            key.setStatus(\"expired\");\n            key.setUpdatedAt(now);\n        });\n\n        apiKeyRepository.saveAll(expiredKeys);\n        log.info(\"Marked {} keys as expired\", expiredKeys.size());\n    }\n\n    private ApiKey mapToDto(ApiKeyEntity entity) {\n        return ApiKey.builder()\n                .id(entity.getId())\n                .customerId(entity.getCustomer().getId().toString())\n                .name(entity.getName())\n                .permissions(Arrays.asList(entity.getPermissions().split(\",\")))\n                .rateLimit(entity.getRateLimit())\n                .expiryDate(entity.getExpiryDate())\n                .status(entity.getStatus())\n                .createdAt(entity.getCreatedAt())\n                .updatedAt(entity.getUpdatedAt())\n                .maskedKey(maskApiKey(entity.getId().toString())) // Create masked version\n                .build();\n    }\n\n    private String maskApiKey(String keyId) {\n        // Create a masked representation for display purposes\n        return \"ak_****\" + keyId.substring(keyId.length() - 4);\n    }\n}","baseTimestamp":1758552632388,"deltas":[{"timestamp":1758552738560,"changes":[{"type":"DELETE","lineNumber":282,"oldContent":"                .status(entity.getStatus())"}]},{"timestamp":1758552753072,"changes":[{"type":"DELETE","lineNumber":282,"oldContent":"                .createdAt(entity.getCreatedAt())"},{"type":"DELETE","lineNumber":283,"oldContent":"                .updatedAt(entity.getUpdatedAt())"}]},{"timestamp":1758555137314,"changes":[{"type":"DELETE","lineNumber":71,"oldContent":"    @Transactional(readOnly = true)"}]}]},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/security/SecurityConfig.java":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/security/SecurityConfig.java","baseContent":"import org.springframework.context.annotation.Bean;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class SecurityConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n                .csrf().disable() // disable CSRF for testing Postman requests\n                .authorizeHttpRequests(auth -> auth\n                        .anyRequest().permitAll() // allow all requests\n                );\n        return http.build();\n    }\n}\n","baseTimestamp":1758553827903,"deltas":[{"timestamp":1758553838530,"changes":[{"type":"INSERT","lineNumber":0,"content":"package com.sprout.AKMS.security;"},{"type":"INSERT","lineNumber":1,"content":""}]},{"timestamp":1758553869657,"changes":[{"type":"MODIFY","lineNumber":2,"content":"import org.springframework.context.annotation.Bean;","oldContent":"import org.springframework.context.annotation.Bean;"},{"type":"INSERT","lineNumber":4,"content":"import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;"},{"type":"MODIFY","lineNumber":14,"content":"                .csrf(AbstractHttpConfigurer::disable) // disable CSRF for testing Postman requests","oldContent":"                .csrf().disable() // disable CSRF for testing Postman requests"}]}]},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/AkmsApplication.java":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/src/main/java/com/sprout/AKMS/AkmsApplication.java","baseContent":"package com.sprout.AKMS;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class \nAkmsApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(AkmsApplication.class, args);\n\t}\n\n}\n","baseTimestamp":1758607753924,"deltas":[{"timestamp":1758607761420,"changes":[{"type":"DELETE","lineNumber":6,"oldContent":"public class "},{"type":"MODIFY","lineNumber":6,"content":"public class AkmsApplication {","oldContent":"AkmsApplication {"}]}]}}}
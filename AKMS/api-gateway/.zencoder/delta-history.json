{"snapshots":{"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/api-gateway (1)/api-gateway/src/main/java/com/sproutsai/api_gateway/client/ApiKeyManagementClient.java":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/api-gateway (1)/api-gateway/src/main/java/com/sproutsai/api_gateway/client/ApiKeyManagementClient.java","baseContent":"package com.sproutsai.api_gateway.client;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport reactor.core.publisher.Mono;\n\nimport java.time.Duration;\nimport java.util.Set;\n\n/**\n * Client for communicating with API Key Management Service (AKMS)\n */\n@Component\n@Slf4J\npublic class ApiKeyManagementClient {\n\n\n    private final WebClient webClient;\n\n    public ApiKeyManagementClient(@Value(\"${app.akms.base-url}\") String akmsBaseUrl,\n                                 @Value(\"${app.akms.timeout:5000}\") int timeoutMs) {\n        this.webClient = WebClient.builder()\n            .baseUrl(akmsBaseUrl)\n            .build();\n    }\n\n    /**\n     * Validate API key with AKMS\n     */\n    public Mono<ApiKeyValidationResponse> validateApiKey(String apiKey) {\n        log.debug(\"Validating API key with AKMS: {}...\", apiKey.substring(0, Math.min(8, apiKey.length())));\n        \n        return webClient.post()\n            .uri(\"/api/keys/validate\")\n            .bodyValue(new ApiKeyValidationRequest(apiKey))\n            .retrieve()\n            .bodyToMono(ApiKeyValidationResponse.class)\n            .timeout(Duration.ofMillis(5000))\n            .doOnSuccess(response -> log.debug(\"API key validation successful for customer: {}\", \n                response != null ? response.customerId() : \"unknown\"))\n            .doOnError(error -> log.error(\"API key validation failed\", error))\n            .onErrorReturn(new ApiKeyValidationResponse(false, null, null, null, null, null, null, null, null));\n    }\n\n    /**\n     * Get rate limit configuration for API key\n     */\n    public Mono<RateLimitConfig> getRateLimitConfig(String customerId, Long apiKeyId) {\n        log.debug(\"Getting rate limit config for customer: {}, apiKey: {}\", customerId, apiKeyId);\n        \n        return webClient.get()\n            .uri(\"/api/keys/{apiKeyId}/rate-limits\", apiKeyId)\n            .header(\"X-Customer-ID\", customerId)\n            .retrieve()\n            .bodyToMono(RateLimitConfig.class)\n            .timeout(Duration.ofMillis(3000))\n            .doOnError(error -> log.error(\"Failed to get rate limit config\", error))\n            .onErrorReturn(new RateLimitConfig(100, 5000, 100000)); // Default limits\n    }\n\n    // DTOs for AKMS communication\n    \n    public record ApiKeyValidationRequest(String apiKey) {}\n    \n    public record ApiKeyValidationResponse(\n        boolean valid,\n        Long keyId,\n        String customerId,\n        String tenantId,\n        String customerName,\n        Set<String> permissions,\n        Integer rateLimitPerMinute,\n        Integer rateLimitPerHour,\n        Integer rateLimitPerDay\n    ) {}\n    \n    public record RateLimitConfig(\n        Integer rateLimitPerMinute,\n        Integer rateLimitPerHour,\n        Integer rateLimitPerDay\n    ) {}\n}\n","baseTimestamp":1758609644267,"deltas":[{"timestamp":1758609650949,"changes":[{"type":"DELETE","lineNumber":16,"oldContent":"@Slf4J"}]},{"timestamp":1758609732534,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import org.slf4j.Logger;"},{"type":"MODIFY","lineNumber":2,"content":"//import org.slf4j.Logger;","oldContent":"import org.slf4j.LoggerFactory;"},{"type":"INSERT","lineNumber":3,"content":"//import org.slf4j.LoggerFactory;"}]},{"timestamp":1758609737833,"changes":[{"type":"MODIFY","lineNumber":2,"content":"import org.slf4j.Logger;","oldContent":"//import org.slf4j.Logger;"}]},{"timestamp":1758609815552,"changes":[{"type":"INSERT","lineNumber":4,"content":"import lombok.extern.slf4j.Slf4j;"}]},{"timestamp":1758609876831,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import org.slf4j.Logger;"},{"type":"DELETE","lineNumber":3,"oldContent":"import org.slf4j.LoggerFactory;"},{"type":"DELETE","lineNumber":4,"oldContent":"import lombok.extern.slf4j.Slf4j;"},{"type":"INSERT","lineNumber":2,"content":""}]},{"timestamp":1758609886988,"changes":[{"type":"INSERT","lineNumber":15,"content":"@Slf4j"}]},{"timestamp":1758609896335,"changes":[{"type":"DELETE","lineNumber":15,"oldContent":"@Slf4j"}]},{"timestamp":1758609902401,"changes":[{"type":"MODIFY","lineNumber":2,"content":"import org.slf4j.Logger;","oldContent":""},{"type":"INSERT","lineNumber":3,"content":"import org.slf4j.LoggerFactory;"},{"type":"INSERT","lineNumber":4,"content":"import lombok.extern.slf4j.Slf4j;"}]},{"timestamp":1758609905765,"changes":[{"type":"DELETE","lineNumber":5,"oldContent":"import lombok.extern.slf4j.Slf4j;"}]},{"timestamp":1758609992051,"changes":[{"type":"INSERT","lineNumber":16,"content":"@Sl"}]},{"timestamp":1758609996852,"changes":[{"type":"MODIFY","lineNumber":16,"content":"@Slf4j","oldContent":"@Sl"}]},{"timestamp":1758610012549,"changes":[{"type":"INSERT","lineNumber":4,"content":"import "}]},{"timestamp":1758610019580,"changes":[{"type":"MODIFY","lineNumber":4,"content":"import lombok","oldContent":"import "}]},{"timestamp":1758610292549,"changes":[{"type":"MODIFY","lineNumber":4,"content":"import ","oldContent":"import lombok"}]},{"timestamp":1758610297838,"changes":[{"type":"DELETE","lineNumber":4,"oldContent":"import "}]},{"timestamp":1758610309413,"changes":[{"type":"INSERT","lineNumber":2,"content":"import lombok.extern.slf4j.Slf4j;"}]}]},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/api-gateway (1)/api-gateway/pom.xml":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/api-gateway (1)/api-gateway/pom.xml","baseContent":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>3.5.6</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<groupId>com.sproutsai</groupId>\n\t<artifactId>api-gateway</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>api-gateway</name>\n\t<description>A Spring Cloud API Gateway for Sprouts ai Services</description>\n\t<url/>\n\t<licenses>\n\t\t<license/>\n\t</licenses>\n\t<developers>\n\t\t<developer/>\n\t</developers>\n\t<scm>\n\t\t<connection/>\n\t\t<developerConnection/>\n\t\t<tag/>\n\t\t<url/>\n\t</scm>\n\t<properties>\n\t\t<java.version>21</java.version>\n\t\t<spring-cloud.version>2025.0.0</spring-cloud.version>\n\t</properties>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-actuator</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.cloud</groupId>\n\t\t\t<artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.cloud</groupId>\n\t\t\t<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n\t\t</dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-gateway</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <!-- Redis for distributed cache + rate limiter -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n\n        <!-- Micrometer for metrics/logging -->\n        <dependency>\n            <groupId>io.micrometer</groupId>\n            <artifactId>micrometer-core</artifactId>\n        </dependency>\n\n        <!-- WebClient for AKMS communication -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-webflux</artifactId>\n        </dependency>\n\n        <!-- Message Queue - RabbitMQ for usage logging -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-amqp</artifactId>\n        </dependency>\n\n        <!-- Validation for request validation -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-validation</artifactId>\n        </dependency>\n\n        <dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n\t<dependencyManagement>\n\t\t<dependencies>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.springframework.cloud</groupId>\n\t\t\t\t<artifactId>spring-cloud-dependencies</artifactId>\n\t\t\t\t<version>${spring-cloud.version}</version>\n\t\t\t\t<type>pom</type>\n\t\t\t\t<scope>import</scope>\n\t\t\t</dependency>\n\t\t</dependencies>\n\t</dependencyManagement>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n","baseTimestamp":1758609853116,"deltas":[{"timestamp":1758609971455,"changes":[{"type":"MODIFY","lineNumber":52,"content":"            <version>1.18.34</version>","oldContent":"            <optional>true</optional>"},{"type":"INSERT","lineNumber":53,"content":"            <scope>provided</scope>"}]}]},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/api-gateway (1)/api-gateway/src/main/java/com/sproutsai/api_gateway/service/UsageTrackingService.java":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/api-gateway (1)/api-gateway/src/main/java/com/sproutsai/api_gateway/service/UsageTrackingService.java","baseContent":"package com.sproutsai.api_gateway.service;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ServerWebExchange;\n\nimport java.time.LocalDateTime;\nimport java.util.UUID;\n\n/**\n * Service for tracking API usage and logging\n */\n@Service\npublic class UsageTrackingService {\n\n    private static final Logger log = LoggerFactory.getLogger(UsageTrackingService.class);\n    \n//    private final RabbitTemplate rabbitTemplate;\n    // ObjectMapper available for future JSON processing needs\n    @SuppressWarnings(\"unused\")\n    private final ObjectMapper objectMapper;\n    \n    @Value(\"${app.messaging.usage-log-exchange}\")\n    private String usageLogExchange;\n    \n    @Value(\"${app.messaging.usage-log-queue}\")\n    private String usageLogQueue;\n\n    public UsageTrackingService(RabbitTemplate rabbitTemplate, \n                               ObjectMapper objectMapper) {\n        this.rabbitTemplate = rabbitTemplate;\n        this.objectMapper = objectMapper;\n    }\n\n    /**\n     * Log API usage asynchronously via message queue\n     */\n    @Async\n    public void logUsageAsync(ServerWebExchange exchange, ApiKeyService.ApiKeyMetadata metadata, \n                             Integer responseStatus, Long responseTimeMs, String errorMessage) {\n        \n        try {\n            UsageLogMessage message = createUsageLogMessage(exchange, metadata, responseStatus, \n                                                          responseTimeMs, errorMessage);\n            \n            // Send to message queue for async processing\n            rabbitTemplate.convertAndSend(usageLogExchange, usageLogQueue, message);\n            \n            log.debug(\"Usage log message sent to queue for customer: {}\", metadata.customerId());\n            \n        } catch (Exception e) {\n            log.error(\"Failed to send usage log message to queue\", e);\n            \n            // Note: In production, consider implementing a fallback mechanism\n            // such as local file logging or alternative message queue\n        }\n    }\n\n    /**\n     * Process usage log message from queue\n     * Note: In the corrected architecture, this would forward to a separate logging service\n     */\n    public void processUsageLogMessage(UsageLogMessage message) {\n        try {\n            log.info(\"Processing usage log message for customer: {} - endpoint: {} - status: {}\", \n                    message.customerId(), message.endpoint(), message.responseStatus());\n            \n            // TODO: Forward to dedicated logging service via HTTP call or another message queue\n            // For now, just log the message details\n            log.debug(\"Usage log details: {}\", message);\n            \n        } catch (Exception e) {\n            log.error(\"Failed to process usage log message: {}\", message, e);\n        }\n    }\n\n    // Private helper methods\n    \n    private UsageLogMessage createUsageLogMessage(ServerWebExchange exchange, \n                                                ApiKeyService.ApiKeyMetadata metadata,\n                                                Integer responseStatus, Long responseTimeMs, \n                                                String errorMessage) {\n        \n        String correlationId = UUID.randomUUID().toString();\n        String sessionId = exchange.getRequest().getHeaders().getFirst(\"X-Session-ID\");\n        \n        return new UsageLogMessage(\n            metadata.keyId(),\n            metadata.customerId(),\n            metadata.tenantId(),\n            metadata.customerName(),\n            exchange.getRequest().getPath().value(),\n            exchange.getRequest().getMethod().name(),\n            exchange.getRequest().getPath().value(),\n            exchange.getRequest().getQueryParams().toString(),\n            exchange.getRequest().getHeaders().getFirst(\"User-Agent\"),\n            getClientIp(exchange),\n            responseStatus,\n            responseTimeMs,\n            getRequestSize(exchange),\n            null, // Response size not available here\n            errorMessage,\n            sessionId,\n            correlationId,\n            LocalDateTime.now()\n        );\n    }\n    \n    private String getClientIp(ServerWebExchange exchange) {\n        String xForwardedFor = exchange.getRequest().getHeaders().getFirst(\"X-Forwarded-For\");\n        if (xForwardedFor != null && !xForwardedFor.isEmpty()) {\n            return xForwardedFor.split(\",\")[0].trim();\n        }\n        \n        String xRealIp = exchange.getRequest().getHeaders().getFirst(\"X-Real-IP\");\n        if (xRealIp != null && !xRealIp.isEmpty()) {\n            return xRealIp;\n        }\n        \n        return exchange.getRequest().getRemoteAddress() != null ? \n            exchange.getRequest().getRemoteAddress().getAddress().getHostAddress() : \"unknown\";\n    }\n    \n    private Long getRequestSize(ServerWebExchange exchange) {\n        String contentLength = exchange.getRequest().getHeaders().getFirst(\"Content-Length\");\n        if (contentLength != null) {\n            try {\n                return Long.parseLong(contentLength);\n            } catch (NumberFormatException e) {\n                log.debug(\"Invalid Content-Length header: {}\", contentLength);\n            }\n        }\n        return null;\n    }\n\n    // DTOs and Records\n    \n    public record UsageLogMessage(\n        Long apiKeyId,\n        String customerId,\n        String tenantId,\n        String customerName,\n        String endpoint,\n        String httpMethod,\n        String requestPath,\n        String queryParams,\n        String userAgent,\n        String clientIp,\n        Integer responseStatus,\n        Long responseTimeMs,\n        Long requestSizeBytes,\n        Long responseSizeBytes,\n        String errorMessage,\n        String sessionId,\n        String correlationId,\n        LocalDateTime timestamp\n    ) {}\n}\n","baseTimestamp":1758610355596,"deltas":[{"timestamp":1758610365364,"changes":[{"type":"MODIFY","lineNumber":22,"content":"    @","oldContent":"//    private final RabbitTemplate rabbitTemplate;"},{"type":"INSERT","lineNumber":23,"content":"    private final RabbitTemplate rabbitTemplate;"}]},{"timestamp":1758610383119,"changes":[{"type":"MODIFY","lineNumber":22,"content":"    @laz","oldContent":"    @"}]},{"timestamp":1758610391196,"changes":[{"type":"MODIFY","lineNumber":22,"content":"    @L","oldContent":"    @laz"}]},{"timestamp":1758610393722,"changes":[{"type":"INSERT","lineNumber":7,"content":"import org.springframework.context.annotation.Lazy;"},{"type":"MODIFY","lineNumber":23,"content":"    @Lazy","oldContent":"    @L"}]},{"timestamp":1758610395745,"changes":[{"type":"DELETE","lineNumber":22,"oldContent":"    "},{"type":"DELETE","lineNumber":23,"oldContent":"    @L"},{"type":"INSERT","lineNumber":22,"content":""},{"type":"INSERT","lineNumber":24,"content":"    private final RabbitTemplate rabbitTemplate;"}]},{"timestamp":1758610424419,"changes":[{"type":"INSERT","lineNumber":23,"content":"    "},{"type":"DELETE","lineNumber":24,"oldContent":"    @Lazy"}]},{"timestamp":1758610429506,"changes":[{"type":"MODIFY","lineNumber":23,"content":"","oldContent":"    "}]},{"timestamp":1758610751933,"changes":[{"type":"MODIFY","lineNumber":23,"content":"y","oldContent":""}]},{"timestamp":1758610756025,"changes":[{"type":"MODIFY","lineNumber":23,"content":"","oldContent":"y"}]}]},"/terminal_output":{"filePath":"/terminal_output","baseContent":"ttpl-lnve15-0143@TTPL-LNVE15-0143:~/Desktop/sprouts.io/codebase/AKMS/api-gateway (1)/api-gateway$ ","baseTimestamp":1758610429841},"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/api-gateway (1)/api-gateway/src/main/java/com/sproutsai/api_gateway/config/RabbitMQConfig.java":{"filePath":"/home/ttpl-lnve15-0143/Desktop/sprouts.io/codebase/AKMS/api-gateway (1)/api-gateway/src/main/java/com/sproutsai/api_gateway/config/RabbitMQConfig.java","baseContent":"package com.sproutsai.api_gateway.config;\n\nimport org.springframework.amqp.core.*;\nimport org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;\nimport org.springframework.amqp.rabbit.connection.ConnectionFactory;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * RabbitMQ configuration for message queuing\n */\n@Configuration\npublic class RabbitMQConfig {\n\n    @Value(\"${app.messaging.usage-log-exchange}\")\n    private String usageLogExchange;\n\n    @Value(\"${app.messaging.usage-log-queue}\")\n    private String usageLogQueue;\n\n    @Autowired\n    private UsageTrackingService usageTrackingService;\n\n    @Bean\n    public Jackson2JsonMessageConverter messageConverter() {\n        return new Jackson2JsonMessageConverter();\n    }\n\n    @Bean\n    public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) {\n        RabbitTemplate template = new RabbitTemplate(connectionFactory);\n        template.setMessageConverter(messageConverter());\n        return template;\n    }\n\n    @Bean\n    public SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(ConnectionFactory connectionFactory) {\n        SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();\n        factory.setConnectionFactory(connectionFactory);\n        factory.setMessageConverter(messageConverter());\n        factory.setConcurrentConsumers(3);\n        factory.setMaxConcurrentConsumers(10);\n        return factory;\n    }\n\n    // Exchange\n    @Bean\n    public TopicExchange usageLogExchange() {\n        return new TopicExchange(usageLogExchange, true, false);\n    }\n\n    // Queue\n    @Bean\n    public Queue usageLogQueue() {\n        return QueueBuilder.durable(usageLogQueue)\n            .withArgument(\"x-dead-letter-exchange\", usageLogExchange + \".dlx\")\n            .withArgument(\"x-dead-letter-routing-key\", \"dead-letter\")\n            .build();\n    }\n\n    // Dead Letter Queue\n    @Bean\n    public Queue deadLetterQueue() {\n        return QueueBuilder.durable(usageLogQueue + \".dlq\").build();\n    }\n\n    @Bean\n    public TopicExchange deadLetterExchange() {\n        return new TopicExchange(usageLogExchange + \".dlx\", true, false);\n    }\n\n    // Bindings\n    @Bean\n    public Binding usageLogBinding() {\n        return BindingBuilder\n            .bind(usageLogQueue())\n            .to(usageLogExchange())\n            .with(usageLogQueue);\n    }\n\n    @Bean\n    public Binding deadLetterBinding() {\n        return BindingBuilder\n            .bind(deadLetterQueue())\n            .to(deadLetterExchange())\n            .with(\"dead-letter\");\n    }\n\n    // Message Listener\n    @RabbitListener(queues = \"${app.messaging.usage-log-queue}\")\n    public void handleUsageLogMessage(UsageTrackingService.UsageLogMessage message) {\n        usageTrackingService.processUsageLogMessage(message);\n    }\n}\n","baseTimestamp":1758610671480}}}